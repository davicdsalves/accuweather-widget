##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    08/May/2011  19:48:26 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\Users\Faby\Desktop\StudyElf\GlassUIWidget\bcfg\co #
#                       nf_loader.cpp                                        #
#    Command line    =  C:\Users\Faby\Desktop\StudyElf\GlassUIWidget\bcfg\co #
#                       nf_loader.cpp -D OLDFUNCTIONS -lC                    #
#                       C:\Users\Faby\Desktop\StudyElf\GlassUIWidget\Debug\L #
#                       ist\ -lA C:\Users\Faby\Desktop\StudyElf\GlassUIWidge #
#                       t\Debug\List\ -o C:\Users\Faby\Desktop\StudyElf\Glas #
#                       sUIWidget\Debug\Obj\ -z2 --no_cse --no_unroll        #
#                       --no_inline --no_code_motion --no_tbaa               #
#                       --no_clustering --no_scheduling --debug --cpu_mode   #
#                       arm --endian little --cpu ARM926EJ-S --stack_align   #
#                       4 --interwork -e --fpu None --eec++ --dlib_config    #
#                       "C:\Users\Faby\EmbebedIAR\Embedded Workbench 4.0     #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I                 #
#                       "C:\Users\Faby\EmbebedIAR\Embedded Workbench 4.0     #
#                       Evaluation\ARM\INC\"                                 #
#    List file       =  C:\Users\Faby\Desktop\StudyElf\GlassUIWidget\Debug\L #
#                       ist\conf_loader.lst                                  #
#    Object file     =  C:\Users\Faby\Desktop\StudyElf\GlassUIWidget\Debug\O #
#                       bj\conf_loader.r79                                   #
#                                                                            #
#                                                                            #
##############################################################################

C:\Users\Faby\Desktop\StudyElf\GlassUIWidget\bcfg\conf_loader.cpp
      1          #include "..\..\include\Lib_Clara.h"
      2          #include "..\..\include\Dir.h"
      3          #include "..\..\include\cfg_items.h"
      4          #include "conf_loader.h"
      5          
      6          

   \                                 In segment DATA_I, align 4, align-sorted
      7          const wchar_t *successed_config_path=L"";
   \                     successed_config_path:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for successed_config_path>`

   \                                 In segment DATA_I, align 4, align-sorted
      8          const wchar_t *successed_config_name=L"";
   \                     successed_config_name:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for successed_config_name>`
      9          
     10          #pragma segment="CONFIG_C"

   \                                 In segment CODE, align 4, keep-with-next
     11          int LoadConfigData(const wchar_t *path,const wchar_t *fname)
     12          {
   \                     ??LoadConfigData:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
     13            int f;
     14            char *buf;
     15            int result=-1;
   \   00000010   0000E0E3           MVN      R0,#+0
   \   00000014   0080B0E1           MOVS     R8,R0
     16            void *cfg;
     17            FSTAT _fstat;
     18            unsigned int rlen;
     19          
     20            cfg=(char *)__segment_begin("CONFIG_C");
   \   00000018   2C019FE5           LDR      R0,??LoadConfigData_1  ;; SFB(CONFIG_C)
   \   0000001C   0090B0E1           MOVS     R9,R0
     21          
     22            unsigned int len=(char *)__segment_end("CONFIG_C")-(char *)__segment_begin("CONFIG_C");
   \   00000020   28019FE5           LDR      R0,??LoadConfigData_1+0x4  ;; SFE(CONFIG_C) - SFB(CONFIG_C)
   \   00000024   00B0B0E1           MOVS     R11,R0
     23          
     24            if ((buf=new char[len]))
   \   00000028   0B00B0E1           MOVS     R0,R11
   \   0000002C   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
   \   00000030   0070B0E1           MOVS     R7,R0
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   3A00000A           BEQ      ??LoadConfigData_2
     25            {
     26              if (fstat(path,fname,&_fstat)!=-1)
   \   0000003C   0D20B0E1           MOVS     R2,SP
   \   00000040   0510B0E1           MOVS     R1,R5
   \   00000044   0400B0E1           MOVS     R0,R4
   \   00000048   1C0100EF           SWI      +284
   \   0000004C   010070E3           CMN      R0,#+1
   \   00000050   1D00000A           BEQ      ??LoadConfigData_3
     27              {
     28                if ((f=_fopen(path,fname,FSX_O_RDONLY,FSX_S_IREAD|FSX_S_IWRITE,0))>=0)
   \   00000054   0000A0E3           MOV      R0,#+0
   \   00000058   01002DE9           PUSH     {R0}
   \   0000005C   603FA0E3           MOV      R3,#+384
   \   00000060   0120A0E3           MOV      R2,#+1
   \   00000064   0510B0E1           MOVS     R1,R5
   \   00000068   0400B0E1           MOVS     R0,R4
   \   0000006C   160100EF           SWI      +278
   \   00000070   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000074   0060B0E1           MOVS     R6,R0
   \   00000078   000050E3           CMP      R0,#+0
   \   0000007C   2700004A           BMI      ??LoadConfigData_4
     29                {
     30                  rlen=fread(f,buf,len);
   \   00000080   0B20B0E1           MOVS     R2,R11
   \   00000084   0710B0E1           MOVS     R1,R7
   \   00000088   0600B0E1           MOVS     R0,R6
   \   0000008C   180100EF           SWI      +280
   \   00000090   00A0B0E1           MOVS     R10,R0
     31                  fclose(f);
   \   00000094   0600B0E1           MOVS     R0,R6
   \   00000098   170100EF           SWI      +279
     32                  if (rlen!=_fstat.fsize || rlen!=len)  goto L_SAVENEWCFG;
   \   0000009C   08009DE5           LDR      R0,[SP, #+8]
   \   000000A0   00005AE1           CMP      R10,R0
   \   000000A4   0800001A           BNE      ??LoadConfigData_3
   \   000000A8   0B005AE1           CMP      R10,R11
   \   000000AC   0600001A           BNE      ??LoadConfigData_3
     33                  memcpy(cfg,buf,len);
   \   000000B0   0B20B0E1           MOVS     R2,R11
   \   000000B4   0710B0E1           MOVS     R1,R7
   \   000000B8   0900B0E1           MOVS     R0,R9
   \   000000BC   130100EF           SWI      +275
     34                  result=0;
   \   000000C0   0000A0E3           MOV      R0,#+0
   \   000000C4   0080B0E1           MOVS     R8,R0
   \   000000C8   140000EA           B        ??LoadConfigData_4
     35                }
     36              }
     37              else
     38              {
     39              L_SAVENEWCFG:
     40                if ((f=_fopen(path,fname,FSX_O_RDWR|FSX_O_TRUNC,FSX_S_IREAD|FSX_S_IWRITE,0))>=0)
   \                     ??LoadConfigData_3:
   \   000000CC   0000A0E3           MOV      R0,#+0
   \   000000D0   01002DE9           PUSH     {R0}
   \   000000D4   603FA0E3           MOV      R3,#+384
   \   000000D8   812FA0E3           MOV      R2,#+516
   \   000000DC   0510B0E1           MOVS     R1,R5
   \   000000E0   0400B0E1           MOVS     R0,R4
   \   000000E4   160100EF           SWI      +278
   \   000000E8   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   000000EC   0060B0E1           MOVS     R6,R0
   \   000000F0   000050E3           CMP      R0,#+0
   \   000000F4   0900004A           BMI      ??LoadConfigData_4
     41                {
     42                  if (fwrite(f,cfg,len)==len) result=0;
   \   000000F8   0B20B0E1           MOVS     R2,R11
   \   000000FC   0910B0E1           MOVS     R1,R9
   \   00000100   0600B0E1           MOVS     R0,R6
   \   00000104   190100EF           SWI      +281
   \   00000108   0B0050E1           CMP      R0,R11
   \   0000010C   0100001A           BNE      ??LoadConfigData_5
   \   00000110   0000A0E3           MOV      R0,#+0
   \   00000114   0080B0E1           MOVS     R8,R0
     43                  fclose(f);
   \                     ??LoadConfigData_5:
   \   00000118   0600B0E1           MOVS     R0,R6
   \   0000011C   170100EF           SWI      +279
     44                }
     45              }
     46              delete buf;
   \                     ??LoadConfigData_4:
   \   00000120   0700B0E1           MOVS     R0,R7
   \   00000124   ........           _BLF     `??operator delete`,`??operator delete??rA`
     47            }
     48            if (result>=0)
   \                     ??LoadConfigData_2:
   \   00000128   000058E3           CMP      R8,#+0
   \   0000012C   0300004A           BMI      ??LoadConfigData_6
     49            {
     50              successed_config_path=path;
   \   00000130   1C009FE5           LDR      R0,??LoadConfigData_1+0x8  ;; successed_config_path
   \   00000134   004080E5           STR      R4,[R0, #+0]
     51              successed_config_name=fname;
   \   00000138   18009FE5           LDR      R0,??LoadConfigData_1+0xC  ;; successed_config_name
   \   0000013C   005080E5           STR      R5,[R0, #+0]
     52            }
     53            return(result);
   \                     ??LoadConfigData_6:
   \   00000140   0800B0E1           MOVS     R0,R8
   \   00000144   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   00000148   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??LoadConfigData_1:
   \   0000014C   ........           DC32     SFB(CONFIG_C)
   \   00000150   ........           DC32     SFE(CONFIG_C) - SFB(CONFIG_C)
   \   00000154   ........           DC32     successed_config_path
   \   00000158   ........           DC32     successed_config_name
     54          }
     55          
     56          

   \                                 In segment CODE, align 4, keep-with-next
     57          void InitConfig(void)
     58          {
   \                     ??InitConfig:
   \   00000000   00402DE9           PUSH     {LR}
     59            if (LoadConfigData(GetDir(DIR_ELFS_CONFIG|MEM_EXTERNAL),L"GlassUIWidget.bcfg")<0)
   \   00000004   1400A0E3           MOV      R0,#+20
   \   00000008   050100EF           SWI      +261
   \   0000000C   1C109FE5           LDR      R1,??InitConfig_1  ;; `?<Constant L"\\x47\\x6c\\x61\\x73\\x73\\x55\\x49\\x57\\`
   \   00000010   ........           BL       ??LoadConfigData
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0300005A           BPL      ??InitConfig_2
     60            {
     61              LoadConfigData(GetDir(DIR_ELFS_CONFIG|MEM_INTERNAL),L"GlassUIWidget.bcfg");
   \   0000001C   1500A0E3           MOV      R0,#+21
   \   00000020   050100EF           SWI      +261
   \   00000024   04109FE5           LDR      R1,??InitConfig_1  ;; `?<Constant L"\\x47\\x6c\\x61\\x73\\x73\\x55\\x49\\x57\\`
   \   00000028   ........           BL       ??LoadConfigData
     62            }
     63          }
   \                     ??InitConfig_2:
   \   0000002C   0080BDE8           POP      {PC}             ;; return
   \                     ??InitConfig_1:
   \   00000030   ........           DC32     `?<Constant L"\\x47\\x6c\\x61\\x73\\x73\\x55\\x49\\x57\\`

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for successed_config_path>`:
   \   00000000   ........           DC32 `?<Constant L"">`

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for successed_config_name>`:
   \   00000000   ........           DC32 `?<Constant L"">`

   \                                 In segment CONFIG_C, align 1

   \                                 In segment DATA_C, align 2, align-sorted
   \                     `?<Constant L"">`:
   \   00000000   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant L"\\x47\\x6c\\x61\\x73\\x73\\x55\\x49\\x57\\`:
   \   00000000   47006C006100       DC8 47H, 0, 6CH, 0, 61H, 0, 73H, 0
   \              7300        
   \   00000008   730055004900       DC8 73H, 0, 55H, 0, 49H, 0, 57H, 0
   \              5700        
   \   00000010   690064006700       DC8 69H, 0, 64H, 0, 67H, 0, 65H, 0
   \              6500        
   \   00000018   74002E006200       DC8 74H, 0, 2EH, 0, 62H, 0, 63H, 0
   \              6300        
   \   00000020   660067000000       DC8 66H, 0, 67H, 0, 0, 0
   \   00000026   0000               DC8 0, 0

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     InitConfig()                       4
     LoadConfigData(wchar_t const *, wchar_t const *)
                                       68


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     successed_config_path             4
     successed_config_name             4
     LoadConfigData(wchar_t const *, wchar_t const *)
                                     348
     InitConfig()                     52
     ?<Initializer for successed_config_path>
                                       4
     ?<Initializer for successed_config_name>
                                       4
     ?<Constant L"">                   2
     ?<Constant L"\x47\x6c\x61\x73\x73\x55\x49\x57\
                                      40
      Others                          44

 
 432 bytes in segment CODE
  42 bytes in segment DATA_C
   8 bytes in segment DATA_I
   8 bytes in segment DATA_ID
  12 bytes in segment INITTAB
 
 400 bytes of CODE  memory (+ 44 bytes shared)
  50 bytes of CONST memory
   8 bytes of DATA  memory

Errors: none
Warnings: none
