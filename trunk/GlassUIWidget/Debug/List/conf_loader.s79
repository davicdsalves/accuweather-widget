//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   08/May/2011  19:48:26 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  C:\Users\Faby\Desktop\StudyElf\GlassUIWidget\bcfg\c /
//                       onf_loader.cpp                                      /
//    Command line    =  C:\Users\Faby\Desktop\StudyElf\GlassUIWidget\bcfg\c /
//                       onf_loader.cpp -D OLDFUNCTIONS -lC                  /
//                       C:\Users\Faby\Desktop\StudyElf\GlassUIWidget\Debug\ /
//                       List\ -lA C:\Users\Faby\Desktop\StudyElf\GlassUIWid /
//                       get\Debug\List\ -o C:\Users\Faby\Desktop\StudyElf\G /
//                       lassUIWidget\Debug\Obj\ -z2 --no_cse --no_unroll    /
//                       --no_inline --no_code_motion --no_tbaa              /
//                       --no_clustering --no_scheduling --debug --cpu_mode  /
//                       arm --endian little --cpu ARM926EJ-S --stack_align  /
//                       4 --interwork -e --fpu None --eec++ --dlib_config   /
//                       "C:\Users\Faby\EmbebedIAR\Embedded Workbench 4.0    /
//                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I                /
//                       "C:\Users\Faby\EmbebedIAR\Embedded Workbench 4.0    /
//                       Evaluation\ARM\INC\"                                /
//    List file       =  C:\Users\Faby\Desktop\StudyElf\GlassUIWidget\Debug\ /
//                       List\conf_loader.s79                                /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME conf_loader

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CONFIG_C:DATA:REORDER:NOROOT(0)
        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBWEAK `?*?DATA_ID`
        PUBLIC ??InitConfig
        FUNCTION ??InitConfig,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??InitConfig??rT
        PUBLIC ??LoadConfigData
        FUNCTION ??LoadConfigData,0203H
        LOCFRAME CSTACK, 68, STACK
        MULTWEAK ??LoadConfigData??rT
        MULTWEAK `??operator delete??rA`
        MULTWEAK `??operator new[]??rA`
        PUBWEAK ?init?tab?DATA_I
        PUBLIC successed_config_name
        PUBLIC successed_config_path
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        



??InitConfig??rT    SYMBOL "??rT", ??InitConfig

??LoadConfigData??rT SYMBOL "??rT", ??LoadConfigData
`??operator delete??rA` SYMBOL "??rA", `??operator delete`
`??operator new[]??rA` SYMBOL "??rA", `??operator new[]`

        EXTERN `??operator delete`
        FUNCTION `??operator delete`,0202H
        EXTERN `??operator new[]`
        FUNCTION `??operator new[]`,0202H

// C:\Users\Faby\Desktop\StudyElf\GlassUIWidget\bcfg\conf_loader.cpp
//    1 #include "..\..\include\Lib_Clara.h"
//    2 #include "..\..\include\Dir.h"
//    3 #include "..\..\include\cfg_items.h"
//    4 #include "conf_loader.h"
//    5 
//    6 

        RSEG DATA_I:DATA:SORT:NOROOT(2)
//    7 const wchar_t *successed_config_path=L"";
successed_config_path:
        DS8 4
        REQUIRE `?<Initializer for successed_config_path>`

        RSEG DATA_I:DATA:SORT:NOROOT(2)
//    8 const wchar_t *successed_config_name=L"";
successed_config_name:
        DS8 4
        REQUIRE `?<Initializer for successed_config_name>`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??LoadConfigData??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??LoadConfigData
//    9 
//   10 #pragma segment="CONFIG_C"

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??LoadConfigData
        ARM
//   11 int LoadConfigData(const wchar_t *path,const wchar_t *fname)
//   12 {
??LoadConfigData:
        PUSH     {R4-R11,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+36
        SUB      SP,SP,#+28
        CFI CFA R13+64
        MOVS     R4,R0
        MOVS     R5,R1
//   13   int f;
//   14   char *buf;
//   15   int result=-1;
        MVN      R0,#+0
        MOVS     R8,R0
//   16   void *cfg;
//   17   FSTAT _fstat;
//   18   unsigned int rlen;
//   19 
//   20   cfg=(char *)__segment_begin("CONFIG_C");
        LDR      R0,??LoadConfigData_1  ;; SFB(CONFIG_C)
        MOVS     R9,R0
//   21 
//   22   unsigned int len=(char *)__segment_end("CONFIG_C")-(char *)__segment_begin("CONFIG_C");
        LDR      R0,??LoadConfigData_1+0x4  ;; SFE(CONFIG_C) - SFB(CONFIG_C)
        MOVS     R11,R0
//   23 
//   24   if ((buf=new char[len]))
        MOVS     R0,R11
        _BLF     `??operator new[]`,`??operator new[]??rA`
        MOVS     R7,R0
        CMP      R0,#+0
        BEQ      ??LoadConfigData_2
//   25   {
//   26     if (fstat(path,fname,&_fstat)!=-1)
        MOVS     R2,SP
        MOVS     R1,R5
        MOVS     R0,R4
        SWI      +284
        CMN      R0,#+1
        BEQ      ??LoadConfigData_3
//   27     {
//   28       if ((f=_fopen(path,fname,FSX_O_RDONLY,FSX_S_IREAD|FSX_S_IWRITE,0))>=0)
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+68
        MOV      R3,#+384
        MOV      R2,#+1
        MOVS     R1,R5
        MOVS     R0,R4
        SWI      +278
        ADD      SP,SP,#+4        ;; stack cleaning
        CFI CFA R13+64
        MOVS     R6,R0
        CMP      R0,#+0
        BMI      ??LoadConfigData_4
//   29       {
//   30         rlen=fread(f,buf,len);
        MOVS     R2,R11
        MOVS     R1,R7
        MOVS     R0,R6
        SWI      +280
        MOVS     R10,R0
//   31         fclose(f);
        MOVS     R0,R6
        SWI      +279
//   32         if (rlen!=_fstat.fsize || rlen!=len)  goto L_SAVENEWCFG;
        LDR      R0,[SP, #+8]
        CMP      R10,R0
        BNE      ??LoadConfigData_3
        CMP      R10,R11
        BNE      ??LoadConfigData_3
//   33         memcpy(cfg,buf,len);
        MOVS     R2,R11
        MOVS     R1,R7
        MOVS     R0,R9
        SWI      +275
//   34         result=0;
        MOV      R0,#+0
        MOVS     R8,R0
        B        ??LoadConfigData_4
//   35       }
//   36     }
//   37     else
//   38     {
//   39     L_SAVENEWCFG:
//   40       if ((f=_fopen(path,fname,FSX_O_RDWR|FSX_O_TRUNC,FSX_S_IREAD|FSX_S_IWRITE,0))>=0)
??LoadConfigData_3:
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+68
        MOV      R3,#+384
        MOV      R2,#+516
        MOVS     R1,R5
        MOVS     R0,R4
        SWI      +278
        ADD      SP,SP,#+4        ;; stack cleaning
        CFI CFA R13+64
        MOVS     R6,R0
        CMP      R0,#+0
        BMI      ??LoadConfigData_4
//   41       {
//   42         if (fwrite(f,cfg,len)==len) result=0;
        MOVS     R2,R11
        MOVS     R1,R9
        MOVS     R0,R6
        SWI      +281
        CMP      R0,R11
        BNE      ??LoadConfigData_5
        MOV      R0,#+0
        MOVS     R8,R0
//   43         fclose(f);
??LoadConfigData_5:
        MOVS     R0,R6
        SWI      +279
//   44       }
//   45     }
//   46     delete buf;
??LoadConfigData_4:
        MOVS     R0,R7
        _BLF     `??operator delete`,`??operator delete??rA`
//   47   }
//   48   if (result>=0)
??LoadConfigData_2:
        CMP      R8,#+0
        BMI      ??LoadConfigData_6
//   49   {
//   50     successed_config_path=path;
        LDR      R0,??LoadConfigData_1+0x8  ;; successed_config_path
        STR      R4,[R0, #+0]
//   51     successed_config_name=fname;
        LDR      R0,??LoadConfigData_1+0xC  ;; successed_config_name
        STR      R5,[R0, #+0]
//   52   }
//   53   return(result);
??LoadConfigData_6:
        MOVS     R0,R8
        ADD      SP,SP,#+28       ;; stack cleaning
        CFI CFA R13+36
        POP      {R4-R11,PC}      ;; return
        DATA
??LoadConfigData_1:
        DC32     SFB(CONFIG_C)
        DC32     SFE(CONFIG_C) - SFB(CONFIG_C)
        DC32     successed_config_path
        DC32     successed_config_name
        CFI EndBlock cfiBlock1
//   54 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??InitConfig??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??InitConfig
//   55 
//   56 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??InitConfig
        ARM
//   57 void InitConfig(void)
//   58 {
??InitConfig:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//   59   if (LoadConfigData(GetDir(DIR_ELFS_CONFIG|MEM_EXTERNAL),L"GlassUIWidget.bcfg")<0)
        MOV      R0,#+20
        SWI      +261
        LDR      R1,??InitConfig_1  ;; `?<Constant L"\\x47\\x6c\\x61\\x73\\x73\\x55\\x49\\x57\\`
        BL       ??LoadConfigData
        CMP      R0,#+0
        BPL      ??InitConfig_2
//   60   {
//   61     LoadConfigData(GetDir(DIR_ELFS_CONFIG|MEM_INTERNAL),L"GlassUIWidget.bcfg");
        MOV      R0,#+21
        SWI      +261
        LDR      R1,??InitConfig_1  ;; `?<Constant L"\\x47\\x6c\\x61\\x73\\x73\\x55\\x49\\x57\\`
        BL       ??LoadConfigData
//   62   }
//   63 }
??InitConfig_2:
        POP      {PC}             ;; return
        DATA
??InitConfig_1:
        DC32     `?<Constant L"\\x47\\x6c\\x61\\x73\\x73\\x55\\x49\\x57\\`
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new[]??rA`:
        LDR      R12,??Subroutine2_0  ;; `??operator new[]`
        BX       R12
        DATA
??Subroutine2_0:
        DC32     `??operator new[]`
        CFI EndBlock cfiBlock4

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator delete??rA`:
        LDR      R12,??Subroutine3_0  ;; `??operator delete`
        BX       R12
        DATA
??Subroutine3_0:
        DC32     `??operator delete`
        CFI EndBlock cfiBlock5

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for successed_config_path>`:
        DATA
        DC32 `?<Constant L"">`

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for successed_config_name>`:
        DATA
        DC32 `?<Constant L"">`

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        RSEG CONFIG_C:DATA:REORDER:NOROOT(0)

        RSEG DATA_C:CONST:SORT:NOROOT(1)
`?<Constant L"">`:
        DATA
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x47\\x6c\\x61\\x73\\x73\\x55\\x49\\x57\\`:
        DATA
        DC8 47H, 0, 6CH, 0, 61H, 0, 73H, 0
        DC8 73H, 0, 55H, 0, 49H, 0, 57H, 0
        DC8 69H, 0, 64H, 0, 67H, 0, 65H, 0
        DC8 74H, 0, 2EH, 0, 62H, 0, 63H, 0
        DC8 66H, 0, 67H, 0, 0, 0
        DC8 0, 0

        END
// 
// 432 bytes in segment CODE
//  42 bytes in segment DATA_C
//   8 bytes in segment DATA_I
//   8 bytes in segment DATA_ID
//  12 bytes in segment INITTAB
// 
// 400 bytes of CODE  memory (+ 44 bytes shared)
//  50 bytes of CONST memory
//   8 bytes of DATA  memory
//
//Errors: none
//Warnings: none
