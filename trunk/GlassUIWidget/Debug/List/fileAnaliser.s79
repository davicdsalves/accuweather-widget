//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   08/May/2011  19:48:25 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  C:\Users\Faby\Desktop\StudyElf\GlassUIWidget\file\f /
//                       ileAnaliser.cpp                                     /
//    Command line    =  C:\Users\Faby\Desktop\StudyElf\GlassUIWidget\file\f /
//                       ileAnaliser.cpp -D OLDFUNCTIONS -lC                 /
//                       C:\Users\Faby\Desktop\StudyElf\GlassUIWidget\Debug\ /
//                       List\ -lA C:\Users\Faby\Desktop\StudyElf\GlassUIWid /
//                       get\Debug\List\ -o C:\Users\Faby\Desktop\StudyElf\G /
//                       lassUIWidget\Debug\Obj\ -z2 --no_cse --no_unroll    /
//                       --no_inline --no_code_motion --no_tbaa              /
//                       --no_clustering --no_scheduling --debug --cpu_mode  /
//                       arm --endian little --cpu ARM926EJ-S --stack_align  /
//                       4 --interwork -e --fpu None --eec++ --dlib_config   /
//                       "C:\Users\Faby\EmbebedIAR\Embedded Workbench 4.0    /
//                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I                /
//                       "C:\Users\Faby\EmbebedIAR\Embedded Workbench 4.0    /
//                       Evaluation\ARM\INC\"                                /
//    List file       =  C:\Users\Faby\Desktop\StudyElf\GlassUIWidget\Debug\ /
//                       List\fileAnaliser.s79                               /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME fileAnaliser

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        MULTWEAK ??Weather??rA
        MULTWEAK ??compareWchar??rA
        PUBLIC ??getDate
        FUNCTION ??getDate,0203H
        LOCFRAME CSTACK, 24, STACK
        MULTWEAK ??getDate??rT
        PUBLIC ??getDayState
        FUNCTION ??getDayState,0203H
        LOCFRAME CSTACK, 20, STACK
        MULTWEAK ??getDayState??rT
        PUBLIC ??getDayWeather
        FUNCTION ??getDayWeather,0203H
        LOCFRAME CSTACK, 32, STACK
        MULTWEAK ??getDayWeather??rT
        PUBLIC ??getEqualContent
        FUNCTION ??getEqualContent,0203H
        LOCFRAME CSTACK, 20, STACK
        MULTWEAK ??getEqualContent??rT
        PUBLIC ??getLocation
        FUNCTION ??getLocation,0203H
        LOCFRAME CSTACK, 16, STACK
        MULTWEAK ??getLocation??rT
        PUBLIC ??getTag
        FUNCTION ??getTag,0203H
        LOCFRAME CSTACK, 24, STACK
        MULTWEAK ??getTag??rT
        MULTWEAK ??getWSubStr??rA
        PUBLIC ??getWeather
        FUNCTION ??getWeather,0203H
        LOCFRAME CSTACK, 60, STACK
        MULTWEAK ??getWeather??rT
        PUBLIC ??getWeatherConditions
        FUNCTION ??getWeatherConditions,0203H
        LOCFRAME CSTACK, 20, STACK
        MULTWEAK ??getWeatherConditions??rT
        MULTWEAK ??int2wstr??rA
        MULTWEAK `??operator delete??rA`
        MULTWEAK `??operator new??rA`
        MULTWEAK `??operator new[]??rA`
        MULTWEAK ??wGetIndexOf??rA
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        








??Weather??rA       SYMBOL "??rA", ??Weather
??compareWchar??rA  SYMBOL "??rA", ??compareWchar

??getDate??rT       SYMBOL "??rT", ??getDate

??getDayState??rT   SYMBOL "??rT", ??getDayState

??getDayWeather??rT SYMBOL "??rT", ??getDayWeather

??getEqualContent??rT SYMBOL "??rT", ??getEqualContent

??getLocation??rT   SYMBOL "??rT", ??getLocation

??getTag??rT        SYMBOL "??rT", ??getTag
??getWSubStr??rA    SYMBOL "??rA", ??getWSubStr

??getWeather??rT    SYMBOL "??rT", ??getWeather

??getWeatherConditions??rT SYMBOL "??rT", ??getWeatherConditions
??int2wstr??rA      SYMBOL "??rA", ??int2wstr
`??operator delete??rA` SYMBOL "??rA", `??operator delete`
`??operator new??rA` SYMBOL "??rA", `??operator new`
`??operator new[]??rA` SYMBOL "??rA", `??operator new[]`
??wGetIndexOf??rA   SYMBOL "??rA", ??wGetIndexOf

        EXTERN ??Weather
        FUNCTION ??Weather,0202H
        EXTERN ??compareWchar
        FUNCTION ??compareWchar,0202H
        EXTERN ??getWSubStr
        FUNCTION ??getWSubStr,0202H
        EXTERN ??int2wstr
        FUNCTION ??int2wstr,0202H
        EXTERN `??operator delete`
        FUNCTION `??operator delete`,0202H
        EXTERN `??operator new`
        FUNCTION `??operator new`,0202H
        EXTERN `??operator new[]`
        FUNCTION `??operator new[]`,0202H
        EXTERN ??wGetIndexOf
        FUNCTION ??wGetIndexOf,0202H
        EXTERN SYNC


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??getDate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??getDate
// C:\Users\Faby\Desktop\StudyElf\GlassUIWidget\file\fileAnaliser.cpp
//    1 #include "..\..\include\Lib_Clara.h"
//    2 #include "..\..\include\Dir.h"
//    3 #include "..\utils\utils.h"
//    4 #include "fileAnaliser.h"
//    5 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??getDate
        ARM
//    6 wchar_t* getDate() { //"2011/3/20"
??getDate:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        SUB      SP,SP,#+8
        CFI CFA R13+16
//    7   DATETIME dt;
//    8   REQUEST_DATEANDTIME_GET(SYNC,&dt);
        MOVS     R1,SP
        LDR      R0,??getDate_1   ;; SYNC
        LDR      R0,[R0, #+0]
        SWI      +366
//    9   wchar_t* data = new wchar_t[0x32];
        MOV      R0,#+100
        _BLF     `??operator new[]`,`??operator new[]??rA`
        MOVS     R4,R0
//   10   snwprintf(data,32,L"<Period StartDate=\"%u/%d/%d\">",dt.date.year,dt.date.mon,dt.date.day);
        LDRB     R0,[SP, #+3]
        PUSH     {R0}
        CFI CFA R13+20
        LDRB     R0,[SP, #+6]
        PUSH     {R0}
        CFI CFA R13+24
        LDRH     R3,[SP, #+8]
        LDR      R2,??getDate_1+0x4  ;; `?<Constant L"\\x3c\\x50\\x65\\x72\\x69\\x6f\\x64\\x20\\`
        MOV      R1,#+32
        MOVS     R0,R4
        SWI      +277
        ADD      SP,SP,#+8        ;; stack cleaning
        CFI CFA R13+16
//   11   return data;
        MOVS     R0,R4
        ADD      SP,SP,#+8        ;; stack cleaning
        CFI CFA R13+8
        POP      {R4,PC}          ;; return
        DATA
??getDate_1:
        DC32     SYNC
        DC32     `?<Constant L"\\x3c\\x50\\x65\\x72\\x69\\x6f\\x64\\x20\\`
        CFI EndBlock cfiBlock1
//   12 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??getTag??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??getTag
//   13 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??getTag
        ARM
//   14 wchar_t* getTag(wchar_t* line, int pos, int& sizeOfTag) {
??getTag:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//   15   int tagClose = wGetIndexOf(line, '>', 1, pos);
        MOVS     R3,R5
        MOV      R2,#+1
        MOV      R1,#+62
        MOVS     R0,R4
        _BLF     ??wGetIndexOf,??wGetIndexOf??rA
        MOVS     R7,R0
//   16   wchar_t* tag = new wchar_t[tagClose+0x2];
        ADDS     R0,R7,#+2
        MOV      R1,#+2
        MULS     R0,R1,R0
        _BLF     `??operator new[]`,`??operator new[]??rA`
        MOVS     R8,R0
//   17   sizeOfTag = tagClose - pos + 2;
        SUBS     R0,R7,R5
        ADDS     R0,R0,#+2
        STR      R0,[R6, #+0]
//   18   for (tagClose=0; tagClose < wstrlen(line) && line[pos + tagClose] != '>' && (tagClose < sizeOfTag); tagClose++)
        MOV      R0,#+0
        MOVS     R7,R0
??getTag_1:
        MOVS     R0,R4
        SWI      +343
        CMP      R7,R0
        BGE      ??getTag_2
        ADDS     R0,R7,R5
        MOV      R1,#+2
        MLA      R0,R1,R0,R4
        LDRH     R0,[R0, #+0]
        CMP      R0,#+62
        BEQ      ??getTag_2
        LDR      R0,[R6, #+0]
        CMP      R7,R0
        BGE      ??getTag_2
//   19     tag[tagClose] = line[pos + tagClose];
        MOV      R0,#+2
        MLA      R1,R0,R7,R8
        ADDS     R0,R7,R5
        MOV      R2,#+2
        MLA      R0,R2,R0,R4
        LDRH     R0,[R0, #+0]
        STRH     R0,[R1, #+0]
        ADDS     R7,R7,#+1
        B        ??getTag_1
//   20   tag[tagClose] = line[pos + tagClose];
??getTag_2:
        MOV      R0,#+2
        MLA      R1,R0,R7,R8
        ADDS     R0,R7,R5
        MOV      R2,#+2
        MLA      R0,R2,R0,R4
        LDRH     R0,[R0, #+0]
        STRH     R0,[R1, #+0]
//   21   tag[tagClose+0x1] = 0;
        MOV      R0,#+2
        MLA      R1,R0,R7,R8
        MOV      R0,#+0
        STRH     R0,[R1, #+2]
//   22   return tag;
        MOVS     R0,R8
        POP      {R4-R8,PC}       ;; return
        CFI EndBlock cfiBlock3
//   23 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??getEqualContent??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??getEqualContent
//   24 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??getEqualContent
        ARM
//   25 wchar_t* getEqualContent(wchar_t* fileContent, int& pos) {
??getEqualContent:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        MOVS     R4,R0
        MOVS     R5,R1
//   26   int indexOfEqual = wGetIndexOf(fileContent,'=',1,pos);
        LDR      R3,[R5, #+0]
        MOV      R2,#+1
        MOV      R1,#+61
        MOVS     R0,R4
        _BLF     ??wGetIndexOf,??wGetIndexOf??rA
        MOVS     R6,R0
//   27   indexOfEqual+=2;
        ADDS     R6,R6,#+2
//   28   int indexOfQuotes = wGetIndexOf(fileContent,'"',1,indexOfEqual);
        MOVS     R3,R6
        MOV      R2,#+1
        MOV      R1,#+34
        MOVS     R0,R4
        _BLF     ??wGetIndexOf,??wGetIndexOf??rA
        MOVS     R7,R0
//   29   pos = indexOfQuotes;
        STR      R7,[R5, #+0]
//   30 
//   31   return getWSubStr(fileContent,indexOfEqual,indexOfQuotes-1);
        SUBS     R2,R7,#+1
        MOVS     R1,R6
        MOVS     R0,R4
        _BLF     ??getWSubStr,??getWSubStr??rA
        POP      {R4-R7,PC}       ;; return
        CFI EndBlock cfiBlock5
//   32 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??getDayState??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??getDayState
//   33 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??getDayState
        ARM
//   34 int getDayState(wchar_t* fileContent,int& pos) {
??getDayState:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        SUB      SP,SP,#+4
        CFI CFA R13+20
        MOVS     R4,R0
        MOVS     R5,R1
//   35   int dayState_ = 0;
        MOV      R1,#+0
        STR      R1,[SP, #+0]
//   36 
//   37   wchar_t* dayState = getEqualContent(fileContent,pos); //getWSubStr(fileContent,indexOfEqual,indexOfQuotes-1);
        MOVS     R1,R5
        MOVS     R0,R4
        BL       ??getEqualContent
        MOVS     R6,R0
//   38   swscanf (dayState, L"%d", &dayState_);
        MOVS     R2,SP
        LDR      R1,??getDayState_1  ;; `?<Constant L"\\x25\\x64">`
        MOVS     R0,R6
        SWI      +972
//   39   delete dayState; dayState = NULL;
        MOVS     R0,R6
        _BLF     `??operator delete`,`??operator delete??rA`
        MOV      R0,#+0
        MOVS     R6,R0
//   40   
//   41   return dayState_;
        LDR      R0,[SP, #+0]
        ADD      SP,SP,#+4        ;; stack cleaning
        CFI CFA R13+16
        POP      {R4-R6,PC}       ;; return
        DATA
??getDayState_1:
        DC32     `?<Constant L"\\x25\\x64">`
        CFI EndBlock cfiBlock7
//   42 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??getLocation??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE ??getLocation
//   43 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function ??getLocation
        ARM
//   44 wchar_t* getLocation(wchar_t* fileContent, int& cursor) {
??getLocation:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOVS     R4,R0
        MOVS     R5,R1
//   45       while (cursor < wstrlen(fileContent)) {
??getLocation_1:
        LDR      R6,[R5, #+0]
        MOVS     R0,R4
        SWI      +343
        CMP      R6,R0
        BGE      ??getLocation_2
//   46         if (fileContent[cursor] == '<' && fileContent[cursor+0x1] == 'F')
        LDR      R0,[R5, #+0]
        MOV      R1,#+2
        MLA      R0,R1,R0,R4
        LDRH     R0,[R0, #+0]
        CMP      R0,#+60
        BNE      ??getLocation_3
        LDR      R0,[R5, #+0]
        MOV      R1,#+2
        MLA      R0,R1,R0,R4
        LDRH     R0,[R0, #+2]
        CMP      R0,#+70
        BNE      ??getLocation_3
//   47           return getEqualContent(fileContent,cursor);
        MOVS     R1,R5
        MOVS     R0,R4
        BL       ??getEqualContent
        B        ??getLocation_4
//   48         cursor++;
??getLocation_3:
        LDR      R0,[R5, #+0]
        ADDS     R0,R0,#+1
        STR      R0,[R5, #+0]
        B        ??getLocation_1
//   49       }
//   50       return NULL;
??getLocation_2:
        MOV      R0,#+0
??getLocation_4:
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock9
//   51 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??getWeatherConditions??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE ??getWeatherConditions
//   52 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function ??getWeatherConditions
        ARM
//   53 wchar_t* getWeatherConditions(wchar_t* num, wchar_t* xmlContent) {
??getWeatherConditions:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        SUB      SP,SP,#+4
        CFI CFA R13+20
        MOVS     R4,R0
        MOVS     R5,R1
//   54   wchar_t* tag = NULL;
        MOV      R0,#+0
        MOVS     R6,R0
//   55   for (int i=0; i<wstrlen(xmlContent);i++){
        MOV      R1,#+0
        STR      R1,[SP, #+0]
??getWeatherConditions_1:
        MOVS     R0,R5
        SWI      +343
        LDR      R1,[SP, #+0]
        CMP      R1,R0
        BGE      ??getWeatherConditions_2
//   56     if (xmlContent[i] == '"') {
        LDR      R0,[SP, #+0]
        MOV      R1,#+2
        MLA      R0,R1,R0,R5
        LDRH     R0,[R0, #+0]
        CMP      R0,#+34
        BNE      ??getWeatherConditions_3
//   57       tag = getWSubStr(xmlContent,i+1,wGetIndexOf(xmlContent,'"',1,i+1));
        LDR      R0,[SP, #+0]
        ADDS     R3,R0,#+1
        MOV      R2,#+1
        MOV      R1,#+34
        MOVS     R0,R5
        _BLF     ??wGetIndexOf,??wGetIndexOf??rA
        MOVS     R2,R0
        LDR      R0,[SP, #+0]
        ADDS     R1,R0,#+1
        MOVS     R0,R5
        _BLF     ??getWSubStr,??getWSubStr??rA
        MOVS     R6,R0
//   58       if (compareWchar(tag,num)) {
        MOVS     R1,R4
        MOVS     R0,R6
        _BLF     ??compareWchar,??compareWchar??rA
        CMP      R0,#+0
        BEQ      ??getWeatherConditions_4
//   59         delete tag; tag = NULL;
        MOVS     R0,R6
        _BLF     `??operator delete`,`??operator delete??rA`
        MOV      R0,#+0
        MOVS     R6,R0
//   60         return getEqualContent(xmlContent,i);
        MOVS     R1,SP
        MOVS     R0,R5
        BL       ??getEqualContent
        B        ??getWeatherConditions_5
//   61       }
//   62       if (tag != NULL) { delete tag; tag = NULL; }
??getWeatherConditions_4:
        CMP      R6,#+0
        BEQ      ??getWeatherConditions_3
        MOVS     R0,R6
        _BLF     `??operator delete`,`??operator delete??rA`
        MOV      R0,#+0
        MOVS     R6,R0
//   63     }
//   64   }
??getWeatherConditions_3:
        LDR      R1,[SP, #+0]
        ADDS     R1,R1,#+1
        STR      R1,[SP, #+0]
        B        ??getWeatherConditions_1
//   65   return NULL;
??getWeatherConditions_2:
        MOV      R0,#+0
??getWeatherConditions_5:
        ADD      SP,SP,#+4        ;; stack cleaning
        CFI CFA R13+16
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock11
//   66 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??getWeather??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE ??getWeather
//   67 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function ??getWeather
        ARM
//   68 Weather* getWeather(wchar_t* fileContent, int& pos, wchar_t* xmlContent) {
??getWeather:
        PUSH     {R4-R11,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+36
        SUB      SP,SP,#+8
        CFI CFA R13+44
        MOVS     R5,R0
        MOVS     R6,R1
        MOVS     R7,R2
//   69   int* states = new int[0x4];
        MOV      R0,#+16
        _BLF     `??operator new[]`,`??operator new[]??rA`
        MOVS     R8,R0
//   70   for (int i=0;i<4;i++)
        MOV      R0,#+0
        MOVS     R4,R0
??getWeather_1:
        CMP      R4,#+4
        BGE      ??getWeather_2
//   71     states[i] = getDayState(fileContent,pos);
        MOVS     R1,R6
        MOVS     R0,R5
        BL       ??getDayState
        MOV      R1,#+4
        MLA      R2,R1,R4,R8
        STR      R0,[R2, #+0]
        ADDS     R4,R4,#+1
        B        ??getWeather_1
//   72   wchar_t* state_ = int2wstr(states[0x0]);
??getWeather_2:
        LDR      R0,[R8, #+0]
        _BLF     ??int2wstr,??int2wstr??rA
        MOVS     R9,R0
//   73   wchar_t* dayState = getWeatherConditions(state_, xmlContent);
        MOVS     R1,R7
        MOVS     R0,R9
        BL       ??getWeatherConditions
        STR      R0,[SP, #+0]
//   74   wchar_t* windDirection = getEqualContent(fileContent,pos);
        MOVS     R1,R6
        MOVS     R0,R5
        BL       ??getEqualContent
        MOVS     R10,R0
//   75   wchar_t* longWind = getWeatherConditions(windDirection, xmlContent);
        MOVS     R1,R7
        MOVS     R0,R10
        BL       ??getWeatherConditions
        STR      R0,[SP, #+4]
//   76   Weather* todayWeather = new Weather(states[0x0],states[0x1],states[0x2],states[0x3],dayState,windDirection,longWind);
        MOV      R0,#+32
        _BLF     `??operator new`,`??operator new??rA`
        MOVS     R4,R0
        CMP      R0,#+0
        BEQ      ??getWeather_3
        LDR      R0,[SP, #+4]
        PUSH     {R0}
        CFI CFA R13+48
        MOVS     R0,R10
        PUSH     {R0}
        CFI CFA R13+52
        LDR      R0,[SP, #+8]
        PUSH     {R0}
        CFI CFA R13+56
        LDR      R0,[R8, #+12]
        PUSH     {R0}
        CFI CFA R13+60
        LDR      R3,[R8, #+8]
        LDR      R2,[R8, #+4]
        LDR      R1,[R8, #+0]
        MOVS     R0,R4
        _BLF     ??Weather,??Weather??rA
        ADD      SP,SP,#+16       ;; stack cleaning
        CFI CFA R13+44
        MOVS     R11,R4
        B        ??getWeather_4
??getWeather_3:
        MOV      R11,#+0
//   77   delete states; states = NULL;
??getWeather_4:
        MOVS     R0,R8
        _BLF     `??operator delete`,`??operator delete??rA`
        MOV      R0,#+0
        MOVS     R8,R0
//   78   delete state_; state_ = NULL;
        MOVS     R0,R9
        _BLF     `??operator delete`,`??operator delete??rA`
        MOV      R0,#+0
        MOVS     R9,R0
//   79   return todayWeather;
        MOVS     R0,R11
        ADD      SP,SP,#+8        ;; stack cleaning
        CFI CFA R13+36
        POP      {R4-R11,PC}      ;; return
        CFI EndBlock cfiBlock13
//   80 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??getDayWeather??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE ??getDayWeather
//   81 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function ??getDayWeather
        ARM
//   82 Weather* getDayWeather(wchar_t* fileContent, int& i, wchar_t* xmlContent) {
??getDayWeather:
        PUSH     {R4-R9,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R9 Frame(CFA, -8)
        CFI R8 Frame(CFA, -12)
        CFI R7 Frame(CFA, -16)
        CFI R6 Frame(CFA, -20)
        CFI R5 Frame(CFA, -24)
        CFI R4 Frame(CFA, -28)
        CFI CFA R13+28
        SUB      SP,SP,#+4
        CFI CFA R13+32
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//   83     Weather* todayWeather = NULL;
        MOV      R0,#+0
        MOVS     R7,R0
//   84 
//   85 
//   86     while (i < wstrlen(fileContent)) {
??getDayWeather_1:
        LDR      R8,[R5, #+0]
        MOVS     R0,R4
        SWI      +343
        CMP      R8,R0
        BGE      ??getDayWeather_2
//   87 
//   88       if (fileContent[i] == '<' && fileContent[i+0x1] == 'P') {
        LDR      R0,[R5, #+0]
        MOV      R1,#+2
        MLA      R0,R1,R0,R4
        LDRH     R0,[R0, #+0]
        CMP      R0,#+60
        BNE      ??getDayWeather_3
        LDR      R0,[R5, #+0]
        MOV      R1,#+2
        MLA      R0,R1,R0,R4
        LDRH     R0,[R0, #+2]
        CMP      R0,#+80
        BNE      ??getDayWeather_3
//   89         int sizeOfTag = 0;
        MOV      R1,#+0
        STR      R1,[SP, #+0]
//   90         wchar_t* tag = getTag(fileContent,i,sizeOfTag);
        MOVS     R2,SP
        LDR      R1,[R5, #+0]
        MOVS     R0,R4
        BL       ??getTag
        MOVS     R8,R0
//   91         i += sizeOfTag;
        LDR      R0,[R5, #+0]
        LDR      R1,[SP, #+0]
        ADDS     R0,R1,R0
        STR      R0,[R5, #+0]
//   92 
//   93         wchar_t* today = getDate();
        BL       ??getDate
        MOVS     R9,R0
//   94         if (compareWchar(tag,today))
        MOVS     R1,R9
        MOVS     R0,R8
        _BLF     ??compareWchar,??compareWchar??rA
        CMP      R0,#+0
        BEQ      ??getDayWeather_4
//   95           todayWeather = getWeather(fileContent,i, xmlContent);
        MOVS     R2,R6
        MOVS     R1,R5
        MOVS     R0,R4
        BL       ??getWeather
        MOVS     R7,R0
//   96         delete tag;
??getDayWeather_4:
        MOVS     R0,R8
        _BLF     `??operator delete`,`??operator delete??rA`
//   97         delete today;
        MOVS     R0,R9
        _BLF     `??operator delete`,`??operator delete??rA`
//   98         if (todayWeather != NULL) break;
        CMP      R7,#+0
        BNE      ??getDayWeather_2
//   99        }
//  100       i++;
??getDayWeather_3:
        LDR      R0,[R5, #+0]
        ADDS     R0,R0,#+1
        STR      R0,[R5, #+0]
        B        ??getDayWeather_1
//  101     }
//  102     
//  103    return todayWeather;
??getDayWeather_2:
        MOVS     R0,R7
        ADD      SP,SP,#+4        ;; stack cleaning
        CFI CFA R13+28
        POP      {R4-R9,PC}       ;; return
        CFI EndBlock cfiBlock15
//  104 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new[]??rA`:
        LDR      R12,??Subroutine8_0  ;; `??operator new[]`
        BX       R12
        DATA
??Subroutine8_0:
        DC32     `??operator new[]`
        CFI EndBlock cfiBlock16

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI NoFunction
        ARM
??wGetIndexOf??rA:
        LDR      R12,??Subroutine9_0  ;; ??wGetIndexOf
        BX       R12
        DATA
??Subroutine9_0:
        DC32     ??wGetIndexOf
        CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon1
        CFI NoFunction
        ARM
??getWSubStr??rA:
        LDR      R12,??Subroutine10_0  ;; ??getWSubStr
        BX       R12
        DATA
??Subroutine10_0:
        DC32     ??getWSubStr
        CFI EndBlock cfiBlock18

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator delete??rA`:
        LDR      R12,??Subroutine11_0  ;; `??operator delete`
        BX       R12
        DATA
??Subroutine11_0:
        DC32     `??operator delete`
        CFI EndBlock cfiBlock19

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon1
        CFI NoFunction
        ARM
??compareWchar??rA:
        LDR      R12,??Subroutine12_0  ;; ??compareWchar
        BX       R12
        DATA
??Subroutine12_0:
        DC32     ??compareWchar
        CFI EndBlock cfiBlock20

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI NoFunction
        ARM
??int2wstr??rA:
        LDR      R12,??Subroutine13_0  ;; ??int2wstr
        BX       R12
        DATA
??Subroutine13_0:
        DC32     ??int2wstr
        CFI EndBlock cfiBlock21

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new??rA`:
        LDR      R12,??Subroutine14_0  ;; `??operator new`
        BX       R12
        DATA
??Subroutine14_0:
        DC32     `??operator new`
        CFI EndBlock cfiBlock22

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon1
        CFI NoFunction
        ARM
??Weather??rA:
        LDR      R12,??Subroutine15_0  ;; ??Weather
        BX       R12
        DATA
??Subroutine15_0:
        DC32     ??Weather
        CFI EndBlock cfiBlock23

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x3c\\x50\\x65\\x72\\x69\\x6f\\x64\\x20\\`:
        DATA
        DC8 3CH, 0, 50H, 0, 65H, 0, 72H, 0
        DC8 69H, 0, 6FH, 0, 64H, 0, 20H, 0
        DC8 53H, 0, 74H, 0, 61H, 0, 72H, 0
        DC8 74H, 0, 44H, 0, 61H, 0, 74H, 0
        DC8 65H, 0, 3DH, 0, 22H, 0, 25H, 0
        DC8 75H, 0, 2FH, 0, 25H, 0, 64H, 0
        DC8 2FH, 0, 25H, 0, 64H, 0, 22H, 0
        DC8 3EH, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x25\\x64">`:
        DATA
        DC8 25H, 0, 64H, 0, 0, 0
        DC8 0, 0

        END
// 
// 1 480 bytes in segment CODE
//    68 bytes in segment DATA_C
// 
// 1 352 bytes of CODE  memory (+ 128 bytes shared)
//    68 bytes of CONST memory
//
//Errors: none
//Warnings: none
