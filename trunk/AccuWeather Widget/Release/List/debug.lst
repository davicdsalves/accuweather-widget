##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    06/Apr/2011  22:50:31 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\Documents and Settings\Davi\Desktop\StudyElf\Accu #
#                       Weather Widget\debug.cpp                             #
#    Command line    =  "C:\Documents and Settings\Davi\Desktop\StudyElf\Acc #
#                       uWeather Widget\debug.cpp" -lC "C:\Documents and     #
#                       Settings\Davi\Desktop\StudyElf\AccuWeather           #
#                       Widget\Release\List\" -lA "C:\Documents and          #
#                       Settings\Davi\Desktop\StudyElf\AccuWeather           #
#                       Widget\Release\List\" -o "C:\Documents and           #
#                       Settings\Davi\Desktop\StudyElf\AccuWeather           #
#                       Widget\Release\Obj\" -s9 --no_unroll --no_inline     #
#                       --cpu_mode arm --endian little --cpu ARM926EJ-S      #
#                       --stack_align 4 --interwork -e --fpu None --eec++    #
#                       --dlib_config "C:\Documents and                      #
#                       Settings\Davi\Desktop\IAR\Embedded Workbench 4.0     #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I "C:\Documents   #
#                       and Settings\Davi\Desktop\IAR\Embedded Workbench     #
#                       4.0 Evaluation\ARM\INC\"                             #
#    List file       =  C:\Documents and Settings\Davi\Desktop\StudyElf\Accu #
#                       Weather Widget\Release\List\debug.lst                #
#    Object file     =  C:\Documents and Settings\Davi\Desktop\StudyElf\Accu #
#                       Weather Widget\Release\Obj\debug.r79                 #
#                                                                            #
#                                                                            #
##############################################################################

C:\Documents and Settings\Davi\Desktop\StudyElf\AccuWeather Widget\debug.cpp
      1          #include "..\include\Lib_Clara.h"
      2          #include "..\include\Dir.h"
      3          #include "debug.h"
      4          

   \                                 In segment CODE, align 4, keep-with-next
      5          void dbtf(char* msg) {
   \                     ??dbtf:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
      6          //  w_chdir(GetDir(DIR_OTHER|MEM_INTERNAL));
      7          //  int file = w_fopen(L"debug.txt", WA_Create+ WA_Append+WA_Write ,0x1FF,0);
      8          //  if ( file > -1 ) { 
      9          //    int length = strlen(msg);
     10          //    w_fwrite( file , msg , length ) ;
     11          //    w_fclose( file ) ; 
     12          //  }
     13            debug_printf("\n+-+-+-+- ");
   \   00000004   1C509FE5           LDR      R5,??dbtf_1      ;; `?<Constant "\\n+-+-+-+- ">`
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0500A0E1           MOV      R0,R5
   \   00000010   B10100EF           SWI      +433
     14            debug_printf(msg);
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   B10100EF           SWI      +433
     15            debug_printf(" +-+-+-+-\n");
   \   0000001C   0C0085E2           ADD      R0,R5,#+12
   \   00000020   B10100EF           SWI      +433
     16          }
   \   00000024   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??dbtf_1:
   \   00000028   ........           DC32     `?<Constant "\\n+-+-+-+- ">`
     17          

   \                                 In segment CODE, align 4, keep-with-next
     18          void printInt(int num) {
   \                     ??printInt:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     19            //<!--debug
     20            char* intI = new char[0x10];
   \   00000008   1000A0E3           MOV      R0,#+16
   \   0000000C   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
   \   00000010   0050A0E1           MOV      R5,R0
     21            sprintf(intI,"%d\n",num);
   \   00000014   0420A0E1           MOV      R2,R4
   \   00000018   051F8FE2           ADR      R1,??printInt_1  ;; "%d\n"
   \   0000001C   140100EF           SWI      +276
     22            dbtf(intI);
   \   00000020   0500A0E1           MOV      R0,R5
   \   00000024   ........           BL       ??dbtf
     23            delete intI;
   \   00000028   0500A0E1           MOV      R0,R5
   \   0000002C   3040BDE8           POP      {R4,R5,LR}       ;; Pop
   \   00000030   ........           _BF      `??operator delete`,`??operator delete??rA`  ;; tailcall
   \                     ??printInt_1:
   \   00000034   25640A00           DC8      "%d\n"
     24            //-->
     25          }
     26          //wchar_t* wstrrchr( const wchar_t* wstr, wchar_t wchar );

   \                                 In segment CODE, align 4, keep-with-next
     27          void printWchar(wchar_t wString) {
   \                     ??printWchar:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     28            //<!--debug
     29            char* intI = new char[0x2];
   \   00000008   0200A0E3           MOV      R0,#+2
   \   0000000C   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
   \   00000010   0050A0E1           MOV      R5,R0
     30            wchar_t* wstr = new wchar_t[0x2];
   \   00000014   0400A0E3           MOV      R0,#+4
   \   00000018   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
   \   0000001C   0060A0E1           MOV      R6,R0
     31            wstr[0x0] = wString;
   \   00000020   B040C6E1           STRH     R4,[R6, #+0]
     32            wstr2strn(intI,wstr,wstrlen(wstr));
   \   00000024   570100EF           SWI      +343
   \   00000028   0020A0E1           MOV      R2,R0
   \   0000002C   0610A0E1           MOV      R1,R6
   \   00000030   0500A0E1           MOV      R0,R5
   \   00000034   5B0100EF           SWI      +347
     33            dbtf(intI);
   \   00000038   0500A0E1           MOV      R0,R5
   \   0000003C   ........           BL       ??dbtf
     34          
     35            //dbtf(" \n");
     36            delete wstr;
   \   00000040   0600A0E1           MOV      R0,R6
   \   00000044   ........           _BLF     `??operator delete`,`??operator delete??rA`
     37            delete intI;
   \   00000048   0500A0E1           MOV      R0,R5
   \   0000004C   7040BDE8           POP      {R4-R6,LR}       ;; Pop
   \   00000050   ........           _BF      `??operator delete`,`??operator delete??rA`  ;; tailcall
     38            //-->
     39          }
     40          

   \                                 In segment CODE, align 4, keep-with-next
     41          void printWstr(const wchar_t* wString) {
   \                     ??printWstr:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     42            //<!--debug
     43            char* intI = new char[0x256];
   \   00000008   5600A0E3           MOV      R0,#+86
   \   0000000C   800F80E3           ORR      R0,R0,#0x200
   \   00000010   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
   \   00000014   0050A0E1           MOV      R5,R0
     44            wstr2strn(intI,wString,wstrlen(wString));
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   570100EF           SWI      +343
   \   00000020   0020A0E1           MOV      R2,R0
   \   00000024   0410A0E1           MOV      R1,R4
   \   00000028   0500A0E1           MOV      R0,R5
   \   0000002C   5B0100EF           SWI      +347
     45            dbtf(intI);
   \   00000030   0500A0E1           MOV      R0,R5
   \   00000034   ........           BL       ??dbtf
     46            delete intI;
   \   00000038   0500A0E1           MOV      R0,R5
   \   0000003C   3040BDE8           POP      {R4,R5,LR}       ;; Pop
   \   00000040   ........           _BF      `??operator delete`,`??operator delete??rA`  ;; tailcall
     47            //-->
     48          }

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\n+-+-+-+- ">`:
   \   00000000   0A2B2D2B2D2B       DC8 "\012+-+-+-+- "
   \              2D2B2D2000  
   \   0000000B   00                 DC8 0
   \   0000000C   202B2D2B2D2B       DC8 " +-+-+-+-\012"
   \              2D2B2D0A00  
   \   00000017   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   25640A00           DC8 "%d\012"

   Maximum stack usage in bytes:

     Function                   CSTACK
     --------                   ------
     dbtf(char *)                  12
     printInt(int)                 12
     printWchar(wchar_t)           16
     printWstr(wchar_t const *)    12


   Segment part sizes:

     Function/Label             Bytes
     --------------             -----
     dbtf(char *)                 44
     printInt(int)                56
     printWchar(wchar_t)          84
     printWstr(wchar_t const *)   68
     ?<Constant "\n+-+-+-+- ">    24
     ?<Constant "%d\n">            4
      Others                      40

 
 292 bytes in segment CODE
  28 bytes in segment DATA_C
 
 252 bytes of CODE  memory (+ 40 bytes shared)
  28 bytes of CONST memory

Errors: none
Warnings: none
