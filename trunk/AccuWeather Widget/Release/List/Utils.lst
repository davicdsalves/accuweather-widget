##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    06/Jun/2011  22:25:07 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\Documents and Settings\Davi\Desktop\StudyElf\Accu #
#                       Weather Widget\utils\Utils.cpp                       #
#    Command line    =  "C:\Documents and Settings\Davi\Desktop\StudyElf\Acc #
#                       uWeather Widget\utils\Utils.cpp" -lC "C:\Documents   #
#                       and Settings\Davi\Desktop\StudyElf\AccuWeather       #
#                       Widget\Release\List\" -lA "C:\Documents and          #
#                       Settings\Davi\Desktop\StudyElf\AccuWeather           #
#                       Widget\Release\List\" -o "C:\Documents and           #
#                       Settings\Davi\Desktop\StudyElf\AccuWeather           #
#                       Widget\Release\Obj\" -s9 --no_unroll --no_inline     #
#                       --cpu_mode arm --endian little --cpu ARM926EJ-S      #
#                       --stack_align 4 --interwork -e --fpu None --eec++    #
#                       --dlib_config "C:\Documents and                      #
#                       Settings\Davi\Desktop\IAR\Embedded Workbench 4.0     #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I "C:\Documents   #
#                       and Settings\Davi\Desktop\IAR\Embedded Workbench     #
#                       4.0 Evaluation\ARM\INC\"                             #
#    List file       =  C:\Documents and Settings\Davi\Desktop\StudyElf\Accu #
#                       Weather Widget\Release\List\Utils.lst                #
#    Object file     =  C:\Documents and Settings\Davi\Desktop\StudyElf\Accu #
#                       Weather Widget\Release\Obj\Utils.r79                 #
#                                                                            #
#                                                                            #
##############################################################################

C:\Documents and Settings\Davi\Desktop\StudyElf\AccuWeather Widget\utils\Utils.cpp
      1          #include "..\..\include\Lib_Clara.h"
      2          #include "..\..\include\Dir.h"
      3          #include "utils.h"
      4          
      5          //<Day State="02">,12,13

   \                                 In segment CODE, align 4, keep-with-next
      6          wchar_t* getWSubStr(wchar_t* wString, int begin, int end) {
   \                     ??getWSubStr:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
      7            if (begin < 0 || end < 0 || (end - begin) < 0) return NULL;
   \   0000000C   00005253           CMPPL    R2,#+0
   \   00000010   05605250           SUBSPL   R6,R2,R5
   \   00000014   0000A043           MOVMI    R0,#+0
   \   00000018   7080BD48           POPMI    {R4-R6,PC}
      8            wchar_t* wSubStr = new wchar_t[end - begin + 0x2];
   \   0000001C   020086E2           ADD      R0,R6,#+2
   \   00000020   8000A0E1           LSL      R0,R0,#+1
   \   00000024   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
      9            int i;
     10            for (i=0;i < (end - begin + 1); i++)
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   012086E2           ADD      R2,R6,#+1
   \   00000030   010052E3           CMP      R2,#+1
   \   00000034   060000AA           BGE      ??getWSubStr_1
   \   00000038   070000EA           B        ??getWSubStr_2
     11                 wSubStr[i] = wString[begin + i];
   \                     ??getWSubStr_3:
   \   0000003C   056081E0           ADD      R6,R1,R5
   \   00000040   866084E0           ADD      R6,R4,R6, LSL #+1
   \   00000044   B060D6E1           LDRH     R6,[R6, #+0]
   \   00000048   813080E0           ADD      R3,R0,R1, LSL #+1
   \   0000004C   011081E2           ADD      R1,R1,#+1
   \   00000050   B060C3E1           STRH     R6,[R3, #+0]
   \                     ??getWSubStr_1:
   \   00000054   020051E1           CMP      R1,R2
   \   00000058   F7FFFFBA           BLT      ??getWSubStr_3
     12            wSubStr[i] = 0;
   \                     ??getWSubStr_2:
   \   0000005C   811080E0           ADD      R1,R0,R1, LSL #+1
   \   00000060   0020A0E3           MOV      R2,#+0
   \   00000064   B020C1E1           STRH     R2,[R1, #+0]
     13            return wSubStr;
   \   00000068   7080BDE8           POP      {R4-R6,PC}       ;; return
     14          }
     15          

   \                                 In segment CODE, align 4, keep-with-next
     16          int wGetIndexOfLine(wchar_t* string) {
   \                     ??wGetIndexOfLine:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     17            for (int i=0;i<wstrlen(string);i++) {
   \   00000008   0050A0E3           MOV      R5,#+0
   \   0000000C   000000EA           B        ??wGetIndexOfLine_1
   \                     ??wGetIndexOfLine_2:
   \   00000010   015085E2           ADD      R5,R5,#+1
   \                     ??wGetIndexOfLine_1:
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   570100EF           SWI      +343
   \   0000001C   000055E1           CMP      R5,R0
   \   00000020   070000AA           BGE      ??wGetIndexOfLine_3
     18          	if (string[i] == '\\' && string[i+0x1] == 'n')
   \   00000024   850084E0           ADD      R0,R4,R5, LSL #+1
   \   00000028   B010D0E1           LDRH     R1,[R0, #+0]
   \   0000002C   5C0051E3           CMP      R1,#+92
   \   00000030   B200D001           LDRHEQ   R0,[R0, #+2]
   \   00000034   6E005003           CMPEQ    R0,#+110
   \   00000038   F4FFFF1A           BNE      ??wGetIndexOfLine_2
     19                    return i;
   \   0000003C   0500A0E1           MOV      R0,R5
   \   00000040   3080BDE8           POP      {R4,R5,PC}
     20            }
     21            return 0;  
   \                     ??wGetIndexOfLine_3:
   \   00000044   0000A0E3           MOV      R0,#+0
   \   00000048   3080BDE8           POP      {R4,R5,PC}       ;; return
     22          }
     23          

   \                                 In segment CODE, align 4, keep-with-next
     24          bool searchLine(wchar_t* string) {
   \                     ??searchLine:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     25            for (int i=0;i<wstrlen(string);i++)
   \   00000008   0050A0E3           MOV      R5,#+0
   \   0000000C   000000EA           B        ??searchLine_1
   \                     ??searchLine_2:
   \   00000010   015085E2           ADD      R5,R5,#+1
   \                     ??searchLine_1:
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   570100EF           SWI      +343
   \   0000001C   000055E1           CMP      R5,R0
   \   00000020   070000AA           BGE      ??searchLine_3
     26              if (string[i] == '\\' && string[i+0x1] == 'n') return true;
   \   00000024   850084E0           ADD      R0,R4,R5, LSL #+1
   \   00000028   B010D0E1           LDRH     R1,[R0, #+0]
   \   0000002C   5C0051E3           CMP      R1,#+92
   \   00000030   B200D001           LDRHEQ   R0,[R0, #+2]
   \   00000034   6E005003           CMPEQ    R0,#+110
   \   00000038   F4FFFF1A           BNE      ??searchLine_2
   \   0000003C   0100A0E3           MOV      R0,#+1
   \   00000040   3080BDE8           POP      {R4,R5,PC}
     27            return false;
   \                     ??searchLine_3:
   \   00000044   0000A0E3           MOV      R0,#+0
   \   00000048   3080BDE8           POP      {R4,R5,PC}       ;; return
     28          }
     29          

   \                                 In segment CODE, align 4, keep-with-next
     30          int wGetIndexOf(wchar_t* string, char search, int time, int from) {
   \                     ??wGetIndexOf:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
     31            int found = 0;
   \   00000014   0080A0E3           MOV      R8,#+0
     32            for (int i=0;i<wstrlen(string);i++) {
   \   00000018   0090A0E3           MOV      R9,#+0
   \   0000001C   000000EA           B        ??wGetIndexOf_1
   \                     ??wGetIndexOf_2:
   \   00000020   019089E2           ADD      R9,R9,#+1
   \                     ??wGetIndexOf_1:
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   570100EF           SWI      +343
   \   0000002C   000059E1           CMP      R9,R0
   \   00000030   070000AA           BGE      ??wGetIndexOf_3
     33          	if (string[i + from] == search){
   \   00000034   090087E0           ADD      R0,R7,R9
   \   00000038   801084E0           ADD      R1,R4,R0, LSL #+1
   \   0000003C   B010D1E1           LDRH     R1,[R1, #+0]
   \   00000040   050051E1           CMP      R1,R5
     34          	  found++;
   \   00000044   01808802           ADDEQ    R8,R8,#+1
     35          	  if (found == time) return i+from;
   \   00000048   06005801           CMPEQ    R8,R6
   \   0000004C   F3FFFF1A           BNE      ??wGetIndexOf_2
   \   00000050   F083BDE8           POP      {R4-R9,PC}
     36          	}
     37            }
     38            return 0;
   \                     ??wGetIndexOf_3:
   \   00000054   0000A0E3           MOV      R0,#+0
   \   00000058   F083BDE8           POP      {R4-R9,PC}       ;; return
     39          }
     40          

   \                                 In segment CODE, align 4, keep-with-next
     41          bool compareWchar(wchar_t* tagFound, wchar_t* todayTag) {
   \                     ??compareWchar:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
     42            for (int i=0;i<wstrlen(tagFound) && i<wstrlen(todayTag);i++)
   \   0000000C   0060A0E3           MOV      R6,#+0
   \   00000010   000000EA           B        ??compareWchar_1
   \                     ??compareWchar_2:
   \   00000014   016086E2           ADD      R6,R6,#+1
   \                     ??compareWchar_1:
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   570100EF           SWI      +343
   \   00000020   000056E1           CMP      R6,R0
   \   00000024   0B0000AA           BGE      ??compareWchar_3
   \   00000028   0500A0E1           MOV      R0,R5
   \   0000002C   570100EF           SWI      +343
   \   00000030   000056E1           CMP      R6,R0
   \   00000034   070000AA           BGE      ??compareWchar_3
     43              if (tagFound[i] != todayTag[i]) return false;
   \   00000038   860084E0           ADD      R0,R4,R6, LSL #+1
   \   0000003C   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000040   861085E0           ADD      R1,R5,R6, LSL #+1
   \   00000044   B010D1E1           LDRH     R1,[R1, #+0]
   \   00000048   010050E1           CMP      R0,R1
   \   0000004C   F0FFFF0A           BEQ      ??compareWchar_2
   \   00000050   0000A0E3           MOV      R0,#+0
   \   00000054   7080BDE8           POP      {R4-R6,PC}
     44            return true;
   \                     ??compareWchar_3:
   \   00000058   0100A0E3           MOV      R0,#+1
   \   0000005C   7080BDE8           POP      {R4-R6,PC}       ;; return
     45          }
     46          

   \                                 In segment CODE, align 4, keep-with-next
     47          int intlen(int start) {
     48              int end = 0;
   \                     ??intlen:
   \   00000000   ........           LDR      R2,??DataTable1  ;; 0x66666667
   \   00000004   0010A0E3           MOV      R1,#+0
   \   00000008   010050E3           CMP      R0,#+1
   \   0000000C   050000BA           BLT      ??intlen_1
     49              while(start > 0) {
     50                  start = start/10;
   \                     ??intlen_2:
   \   00000010   9230CCE0           SMULL    R3,R12,R2,R0
     51                  end++;
   \   00000014   011081E2           ADD      R1,R1,#+1
   \   00000018   4CC1A0E1           ASR      R12,R12,#+2
   \   0000001C   A00F8CE0           ADD      R0,R12,R0, LSR #+31
     52              }
   \   00000020   010050E3           CMP      R0,#+1
   \   00000024   F9FFFFAA           BGE      ??intlen_2
     53              return end;
   \                     ??intlen_1:
   \   00000028   0100A0E1           MOV      R0,R1
   \   0000002C   1EFF2FE1           BX       LR               ;; return
     54          }  
     55          

   \                                 In segment CODE, align 4, keep-with-next
     56          DATETIME getDateTime() { //"2011/3/20"
   \                     ??getDateTime:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
     57            DATETIME dt;
     58            REQUEST_DATEANDTIME_GET(SYNC,&dt);
   \   00000008   0D10A0E1           MOV      R1,SP
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   30009FE5           LDR      R0,??getDateTime_1  ;; SYNC
   \   00000014   000090E5           LDR      R0,[R0, #+0]
   \   00000018   6E0100EF           SWI      +366
     59            return dt;
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   B010D0E1           LDRH     R1,[R0, #0]
   \   00000024   B010C4E1           STRH     R1,[R4, #+0]
   \   00000028   B210D0E1           LDRH     R1,[R0, #+2]
   \   0000002C   B210C4E1           STRH     R1,[R4, #+2]
   \   00000030   B410D0E1           LDRH     R1,[R0, #+4]
   \   00000034   B410C4E1           STRH     R1,[R4, #+4]
   \   00000038   B610D0E1           LDRH     R1,[R0, #+6]
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   B610C4E1           STRH     R1,[R4, #+6]
   \   00000044   1680BDE8           POP      {R1,R2,R4,PC}    ;; return
   \                     ??getDateTime_1:
   \   00000048   ........           DC32     SYNC
     60          }
     61          

   \                                 In segment CODE, align 4, keep-with-next
     62          wchar_t* int2wstr(int num) {
   \                     ??int2wstr:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     63            wchar_t* number = new wchar_t[intlen(num) + 0x1];
   \   00000008   ........           BL       ??intlen
   \   0000000C   010080E2           ADD      R0,R0,#+1
   \   00000010   8000A0E1           LSL      R0,R0,#+1
   \   00000014   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
   \   00000018   0050A0E1           MOV      R5,R0
     64            snwprintf(number,intlen(num),L"%d",num);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       ??intlen
   \   00000024   28209FE5           LDR      R2,??int2wstr_1  ;; `?<Constant L"\\x25\\x64">`
   \   00000028   0010A0E1           MOV      R1,R0
   \   0000002C   0430A0E1           MOV      R3,R4
   \   00000030   0500A0E1           MOV      R0,R5
   \   00000034   150100EF           SWI      +277
     65            number[intlen(num)] = 0;
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           BL       ??intlen
   \   00000040   800085E0           ADD      R0,R5,R0, LSL #+1
   \   00000044   0010A0E3           MOV      R1,#+0
   \   00000048   B010C0E1           STRH     R1,[R0, #+0]
     66            return number;
   \   0000004C   0500A0E1           MOV      R0,R5
   \   00000050   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??int2wstr_1:
   \   00000054   ........           DC32     `?<Constant L"\\x25\\x64">`
     67          }
     68          

   \                                 In segment CODE, align 4, keep-with-next
     69          bool isDateEqual(DATETIME* r1, DATETIME* r2) {
     70            int dif = r1->date.year - r2->date.year;
   \                     ??isDateEqual:
   \   00000000   B020D0E1           LDRH     R2,[R0, #+0]
   \   00000004   B030D1E1           LDRH     R3,[R1, #+0]
   \   00000008   032052E0           SUBS     R2,R2,R3
     71            if (dif == 0) {
   \   0000000C   0500001A           BNE      ??isDateEqual_1
     72              dif = r1->date.mon - r2->date.mon;
   \   00000010   0220D0E5           LDRB     R2,[R0, #+2]
   \   00000014   0230D1E5           LDRB     R3,[R1, #+2]
   \   00000018   032052E0           SUBS     R2,R2,R3
     73              if (dif == 0) dif = r1->date.day - r2->date.day;
   \   0000001C   0300D005           LDRBEQ   R0,[R0, #+3]
   \   00000020   0310D105           LDRBEQ   R1,[R1, #+3]
   \   00000024   01204000           SUBEQ    R2,R0,R1
     74            }
     75            return dif;
   \                     ??isDateEqual_1:
   \   00000028   000052E3           CMP      R2,#+0
   \   0000002C   0100A013           MOVNE    R0,#+1
   \   00000030   1EFF2F11           BXNE     LR
   \   00000034   0000A0E3           MOV      R0,#+0
   \   00000038   1EFF2FE1           BX       LR               ;; return
     76          }
     77          

   \                                 In segment CODE, align 4, keep-with-next
     78          float celsiusToFahrenheit(int celsius) {
     79            return (celsius * 9 / 5) + 32;
   \                     ??celsiusToFahrenheit:
   \   00000000   ........           LDR      R1,??DataTable1  ;; 0x66666667
   \   00000004   800180E0           ADD      R0,R0,R0, LSL #+3
   \   00000008   9120C3E0           SMULL    R2,R3,R1,R0
   \   0000000C   C330A0E1           ASR      R3,R3,#+1
   \   00000010   A00F83E0           ADD      R0,R3,R0, LSR #+31
   \   00000014   200080E2           ADD      R0,R0,#+32
   \   00000018   ........           _BF      __longToFloat,??__longToFloat??rA  ;; tailcall
     80          }
     81          

   \                                 In segment CODE, align 4, keep-with-next
     82          float km2Mile(int km) {
   \                     ??km2Mile:
   \   00000000   00402DE9           PUSH     {LR}
     83            return (km * 0.6214);
   \   00000004   ........           _BLF     __longToDouble,??__longToDouble??rA
   \   00000008   0C209FE5           LDR      R2,??km2Mile_1   ;; 0x40b78034
   \   0000000C   0C309FE5           LDR      R3,??km2Mile_1+0x4  ;; 0x3fe3e282
   \   00000010   ........           _BLF     __dMul,??__dMul??rA
   \   00000014   0040BDE8           POP      {LR}             ;; Pop
   \   00000018   ........           _BF      __doubleToFloat,??__doubleToFloat??rA  ;; tailcall
   \                     ??km2Mile_1:
   \   0000001C   3480B740           DC32     0x40b78034
   \   00000020   82E2E33F           DC32     0x3fe3e282
     84          }
     85          

   \                                 In segment CODE, align 4, keep-with-next
     86          float km2meter(int km) {
   \                     ??km2meter:
   \   00000000   00402DE9           PUSH     {LR}
     87            return (km / 3.6);
   \   00000004   ........           _BLF     __longToDouble,??__longToDouble??rA
   \   00000008   0C209FE5           LDR      R2,??km2meter_1  ;; 0xffffffffcccccccd
   \   0000000C   0C309FE5           LDR      R3,??km2meter_1+0x4  ;; 0x400ccccc
   \   00000010   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000014   0040BDE8           POP      {LR}             ;; Pop
   \   00000018   ........           _BF      __doubleToFloat,??__doubleToFloat??rA  ;; tailcall
   \                     ??km2meter_1:
   \   0000001C   CDCCCCCC           DC32     0xffffffffcccccccd
   \   00000020   CCCC0C40           DC32     0x400ccccc
     88          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   67666666           DC32     0x66666667

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant L"\\x25\\x64">`:
   \   00000000   250064000000       DC8 25H, 0, 64H, 0, 0, 0
   \   00000006   0000               DC8 0, 0

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     celsiusToFahrenheit(int)           4
     compareWchar(wchar_t *, wchar_t *)
                                       16
     getDateTime()                     16
     getWSubStr(wchar_t *, int, int)
                                       16
     int2wstr(int)                     12
     intlen(int)                        0
     isDateEqual(DATETIME *, DATETIME *)
                                        0
     km2Mile(int)                       4
     km2meter(int)                      4
     searchLine(wchar_t *)             12
     wGetIndexOf(wchar_t *, char, int, int)
                                       28
     wGetIndexOfLine(wchar_t *)        12


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     getWSubStr(wchar_t *, int, int)
                                     108
     wGetIndexOfLine(wchar_t *)       76
     searchLine(wchar_t *)            76
     wGetIndexOf(wchar_t *, char, int, int)
                                      92
     compareWchar(wchar_t *, wchar_t *)
                                      96
     intlen(int)                      48
     getDateTime()                    76
     int2wstr(int)                    88
     isDateEqual(DATETIME *, DATETIME *)
                                      60
     celsiusToFahrenheit(int)         28
     km2Mile(int)                     36
     km2meter(int)                    36
     ??DataTable1                      4
     ?<Constant L"\x25\x64">           8
      Others                         120

 
 944 bytes in segment CODE
   8 bytes in segment DATA_C
 
 824 bytes of CODE  memory (+ 120 bytes shared)
   8 bytes of CONST memory

Errors: none
Warnings: none
