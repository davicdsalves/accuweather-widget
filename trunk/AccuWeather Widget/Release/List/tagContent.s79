//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   30/Mar/2011  17:57:06 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  G:\Phone\Making elf patches\AccuWeather             /
//                       Widget\tagContent.cpp                               /
//    Command line    =  "G:\Phone\Making elf patches\AccuWeather            /
//                       Widget\tagContent.cpp" -lC "G:\Phone\Making elf     /
//                       patches\AccuWeather Widget\Release\List\" -lA       /
//                       "G:\Phone\Making elf patches\AccuWeather            /
//                       Widget\Release\List\" -o "G:\Phone\Making elf       /
//                       patches\AccuWeather Widget\Release\Obj\" -s9        /
//                       --no_unroll --no_inline --cpu_mode arm --endian     /
//                       little --cpu ARM926EJ-S --stack_align 4             /
//                       --interwork -e --fpu None --eec++ --dlib_config     /
//                       "G:\Phone\Making elf patches\IAR\Embedded           /
//                       Workbench 4.0 Evaluation\ARM\LIB\dl5tpainl8n.h" -I  /
//                       "G:\Phone\Making elf patches\IAR\Embedded           /
//                       Workbench 4.0 Evaluation\ARM\INC\"                  /
//    List file       =  G:\Phone\Making elf patches\AccuWeather             /
//                       Widget\Release\List\tagContent.s79                  /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME tagContent

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBWEAK `?*?DATA_ID`
        MULTWEAK ??compareWchar??rA
        PUBLIC ??getDate
        FUNCTION ??getDate,0203H
        LOCFRAME CSTACK, 24, STACK
        MULTWEAK ??getDate??rT
        PUBLIC ??getDayState
        FUNCTION ??getDayState,0203H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??getDayState??rT
        PUBLIC ??getDayWeather
        FUNCTION ??getDayWeather,0203H
        LOCFRAME CSTACK, 28, STACK
        MULTWEAK ??getDayWeather??rT
        PUBLIC ??getEqualContent
        FUNCTION ??getEqualContent,0203H
        LOCFRAME CSTACK, 16, STACK
        MULTWEAK ??getEqualContent??rT
        PUBLIC ??getLocation
        FUNCTION ??getLocation,0203H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??getLocation??rT
        PUBLIC ??getTag
        FUNCTION ??getTag,0203H
        LOCFRAME CSTACK, 32, STACK
        MULTWEAK ??getTag??rT
        MULTWEAK ??getWSubStr??rA
        PUBLIC ??getWeather
        FUNCTION ??getWeather,0203H
        LOCFRAME CSTACK, 28, STACK
        MULTWEAK ??getWeather??rT
        PUBLIC ??getWeatherConditions
        FUNCTION ??getWeatherConditions,0203H
        LOCFRAME CSTACK, 16, STACK
        MULTWEAK ??getWeatherConditions??rT
        MULTWEAK `??new Weather??rA`
        MULTWEAK `??operator delete??rA`
        MULTWEAK `??operator new[]??rA`
        MULTWEAK ??wGetIndexOf??rA
        PUBWEAK ?init?tab?DATA_I
        PUBLIC weatherConditions
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        






??compareWchar??rA  SYMBOL "??rA", ??compareWchar

??getDate??rT       SYMBOL "??rT", ??getDate

??getDayState??rT   SYMBOL "??rT", ??getDayState

??getDayWeather??rT SYMBOL "??rT", ??getDayWeather

??getEqualContent??rT SYMBOL "??rT", ??getEqualContent

??getLocation??rT   SYMBOL "??rT", ??getLocation

??getTag??rT        SYMBOL "??rT", ??getTag
??getWSubStr??rA    SYMBOL "??rA", ??getWSubStr

??getWeather??rT    SYMBOL "??rT", ??getWeather

??getWeatherConditions??rT SYMBOL "??rT", ??getWeatherConditions
`??new Weather??rA` SYMBOL "??rA", `??new Weather`
`??operator delete??rA` SYMBOL "??rA", `??operator delete`
`??operator new[]??rA` SYMBOL "??rA", `??operator new[]`
??wGetIndexOf??rA   SYMBOL "??rA", ??wGetIndexOf

        EXTERN ??compareWchar
        FUNCTION ??compareWchar,0202H
        EXTERN ??getWSubStr
        FUNCTION ??getWSubStr,0202H
        EXTERN `??new Weather`
        FUNCTION `??new Weather`,0202H
        EXTERN `??operator delete`
        FUNCTION `??operator delete`,0202H
        EXTERN `??operator new[]`
        FUNCTION `??operator new[]`,0202H
        EXTERN ??wGetIndexOf
        FUNCTION ??wGetIndexOf,0202H
        EXTERN SYNC

// G:\Phone\Making elf patches\AccuWeather Widget\tagContent.cpp
//    1 #include "..\include\Lib_Clara.h"
//    2 #include "..\include\Dir.h"
//    3 #include "tagContent.h"
//    4 #include "debug.h"
//    5 #include "string.h"
//    6 

        RSEG DATA_I:DATA:SORT:NOROOT(2)
//    7 wchar_t* weatherConditions[] = {L"Plenty of sunshine", L"Mostly Sunny", L"Partly Sunny", L"Intermittent Clouds", //1-4
weatherConditions:
        DS8 176
        REQUIRE `?<Initializer for weatherConditions>`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??getDate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??getDate
//    8       L"Hazy Sunshine", L"Mostly Cloudy", L"Cloudy", L"Dreary", L"", L"", L"Fog",  //5-11
//    9       L"Showers",L"Mostly Cloudy with Showers", L"Partly Sunny with Showers", L"Thunderstorms", //12-15
//   10       L"Mostly Cloudy with Thunder Showers",L"Partly Sunny with Thunder Showers", L"Rain", L"Flurries", //16-19
//   11       L"Mostly Cloudy with Flurries",L"Partly Sunny with Flurries", L"Snow", //20-22
//   12       L"Mostly Cloudy with Snow", L"Ice", L"Sleet", L"Freezing Rain", L"", L"", //23-28
//   13       L"Rain and Snow", L"Hot", L"Cold", L"Windy", L"Clear", //29-33
//   14       L"Mostly Clear", L"Partly Cloudy", L"Intermittent Clouds", L"Hazy", //34-37
//   15       L"Mostly Cloudy", L"Partly Cloudy with Showers", L"Mostly Cloudy with Showers", L"Partly Cloudy with Thunder Showers", //38-41
//   16       L"Mostly Cloudy with Thunder Showers", L"Mostly Cloudy with Flurries", L"Mostly Cloudy with Snow"}; //42-44
//   17 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??getDate
        ARM
//   18 wchar_t* getDate() { //"2011/3/20"
//   19   DATETIME dt;
//   20   REQUEST_DATEANDTIME_GET(SYNC,&dt);
??getDate:
        LDR      R0,??getDate_1   ;; SYNC
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        SUB      SP,SP,#+8
        CFI CFA R13+16
        LDR      R0,[R0, #+0]
        MOV      R1,SP
        SWI      +366
//   21   wchar_t* data = new wchar_t[0x32];
        MOV      R0,#+100
        _BLF     `??operator new[]`,`??operator new[]??rA`
//   22   snwprintf(data,32,L"<Period StartDate=\"%u/%d/%d\">",dt.date.year,dt.date.mon,dt.date.day);
        LDR      R2,??getDate_1+0x4  ;; `?<Constant L"\\x3c\\x50\\x65\\x72\\x69\\x6f\\x64\\x20\\`
        MOV      R4,R0
        LDRB     R0,[SP, #+3]
        MOV      R1,#+32
        PUSH     {R0}
        CFI CFA R13+20
        LDRB     R0,[SP, #+6]
        PUSH     {R0}
        CFI CFA R13+24
        LDRH     R3,[SP, #+8]
        MOV      R0,R4
        SWI      +277
//   23   return data;
        MOV      R0,R4
        ADD      SP,SP,#+16
        CFI CFA R13+8
        POP      {R4,PC}          ;; return
        DATA
??getDate_1:
        DC32     SYNC
        DC32     `?<Constant L"\\x3c\\x50\\x65\\x72\\x69\\x6f\\x64\\x20\\`
        CFI EndBlock cfiBlock1
//   24 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??getTag??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??getTag
//   25 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??getTag
        ARM
//   26 wchar_t* getTag(wchar_t* line, int pos, int& sizeOfTag) {
??getTag:
        PUSH     {R4-R10,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R10 Frame(CFA, -8)
        CFI R9 Frame(CFA, -12)
        CFI R8 Frame(CFA, -16)
        CFI R7 Frame(CFA, -20)
        CFI R6 Frame(CFA, -24)
        CFI R5 Frame(CFA, -28)
        CFI R4 Frame(CFA, -32)
        CFI CFA R13+32
        MOV      R4,R0
        MOV      R5,R1
        MOV      R6,R2
//   27   int tagClose = wGetIndexOf(line, '>', 1, pos);
        MOV      R3,R5
        MOV      R2,#+1
        MOV      R1,#+62
        _BLF     ??wGetIndexOf,??wGetIndexOf??rA
        MOV      R8,R0
//   28   wchar_t* tag = new wchar_t[tagClose+0x2];
        ADD      R0,R8,#+2
        LSL      R0,R0,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
        MOV      R7,R0
//   29   sizeOfTag = tagClose - pos + 2;
        SUB      R0,R8,R5
        ADD      R0,R0,#+2
        STR      R0,[R6, #+0]
//   30   for (tagClose=0; tagClose < wstrlen(line) && line[pos + tagClose] != '>' && (tagClose < sizeOfTag); tagClose++)
        MOV      R8,#+0
        B        ??getTag_1
//   31     tag[tagClose] = line[pos + tagClose];
??getTag_2:
        LDRH     R0,[R10, #+0]
        ADD      R8,R8,#+1
        STRH     R0,[R9, #+0]
??getTag_1:
        ADD      R0,R8,R5
        ADD      R10,R4,R0, LSL #+1
        ADD      R9,R7,R8, LSL #+1
        MOV      R0,R4
        SWI      +343
        CMP      R8,R0
        BGE      ??getTag_3
        LDRH     R0,[R10, #+0]
        CMP      R0,#+62
        BEQ      ??getTag_3
        LDR      R0,[R6, #+0]
        CMP      R8,R0
        BLT      ??getTag_2
//   32   tag[tagClose] = line[pos + tagClose];
??getTag_3:
        LDRH     R0,[R10, #+0]
        STRH     R0,[R9, #+0]
//   33   tag[tagClose+0x1] = 0;
        MOV      R0,#+0
        STRH     R0,[R9, #+2]
//   34   return tag;
        MOV      R0,R7
        POP      {R4-R10,PC}      ;; return
        CFI EndBlock cfiBlock3
//   35 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??getEqualContent??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??getEqualContent
//   36 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??getEqualContent
        ARM
//   37 wchar_t* getEqualContent(wchar_t* fileContent, int& pos) {
??getEqualContent:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOV      R4,R0
        MOV      R5,R1
//   38   int indexOfEqual = wGetIndexOf(fileContent,'=',1,pos);
        LDR      R3,[R5, #+0]
        MOV      R2,#+1
        MOV      R1,#+61
        _BLF     ??wGetIndexOf,??wGetIndexOf??rA
//   39   indexOfEqual+=2;
        ADD      R6,R0,#+2
//   40   int indexOfQuotes = wGetIndexOf(fileContent,'"',1,indexOfEqual);
        MOV      R3,R6
        MOV      R2,#+1
        MOV      R1,#+34
        MOV      R0,R4
        _BLF     ??wGetIndexOf,??wGetIndexOf??rA
//   41   pos = indexOfQuotes;
        STR      R0,[R5, #+0]
//   42 
//   43   return getWSubStr(fileContent,indexOfEqual,indexOfQuotes-1);
        SUB      R2,R0,#+1
        MOV      R1,R6
        MOV      R0,R4
        POP      {R4-R6,LR}       ;; Pop
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        _BF      ??getWSubStr,??getWSubStr??rA  ;; tailcall
        CFI EndBlock cfiBlock5
//   44 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??getDayState??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??getDayState
//   45 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??getDayState
        ARM
//   46 int getDayState(wchar_t* fileContent,int& pos) {
??getDayState:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        SUB      SP,SP,#+4
        CFI CFA R13+12
//   47   int dayState_ = 0;
        MOV      R3,#+0
        STR      R3,[SP, #+0]
//   48 
//   49   wchar_t* dayState = getEqualContent(fileContent,pos); //getWSubStr(fileContent,indexOfEqual,indexOfQuotes-1);
        BL       ??getEqualContent
//   50   swscanf (dayState, L"%d", &dayState_);
        LDR      R1,??getDayState_1  ;; `?<Constant L"\\x25\\x64">`
        MOV      R4,R0
        MOV      R2,SP
        SWI      +972
//   51   delete dayState; dayState = NULL;
        MOV      R0,R4
        _BLF     `??operator delete`,`??operator delete??rA`
//   52   
//   53   return dayState_;
        LDR      R0,[SP, #+0]
        POP      {R1,R4,PC}       ;; return
        DATA
??getDayState_1:
        DC32     `?<Constant L"\\x25\\x64">`
        CFI EndBlock cfiBlock7
//   54 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??getLocation??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE ??getLocation
//   55 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function ??getLocation
        ARM
//   56 wchar_t* getLocation(wchar_t* fileContent, int& cursor) {
??getLocation:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,R0
        MOV      R5,R1
        B        ??getLocation_1
//   57       while (cursor < wstrlen(fileContent)) {
//   58         if (fileContent[cursor] == '<' && fileContent[cursor+0x1] == 'F')
//   59           return getEqualContent(fileContent,cursor);
//   60         cursor++;
??getLocation_2:
        ADD      R0,R1,#+1
        STR      R0,[R5, #+0]
??getLocation_1:
        MOV      R0,R4
        SWI      +343
        LDR      R1,[R5, #+0]
        CMP      R1,R0
        BGE      ??getLocation_3
        ADD      R0,R4,R1, LSL #+1
        LDRH     R2,[R0, #+0]
        CMP      R2,#+60
        LDRHEQ   R0,[R0, #+2]
        CMPEQ    R0,#+70
        BNE      ??getLocation_2
        MOV      R1,R5
        MOV      R0,R4
        POP      {R4,R5,LR}       ;; Pop
        CFI R4 SameValue
        CFI R5 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        B        ??getEqualContent  ;; tailcall
        CFI R4 Frame(CFA, -12)
        CFI R5 Frame(CFA, -8)
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+12
//   61       }
//   62       return NULL;
??getLocation_3:
        MOV      R0,#+0
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock9
//   63 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??getWeatherConditions??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE ??getWeatherConditions
//   64 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function ??getWeatherConditions
        ARM
//   65 wchar_t* getWeatherConditions(int num) {
//   66 
//   67   int conditionLength = wstrlen(weatherConditions[num - 0x1]);
??getWeatherConditions:
        LDR      R1,??getWeatherConditions_1  ;; weatherConditions
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        ADD      R4,R1,R0, LSL #+2
        LDR      R0,[R4, #-4]
        SWI      +343
        MOV      R5,R0
//   68 //  int conditionLength = wstrlen(weatherConditions[num]);
//   69   
//   70   wchar_t* condition = new wchar_t[conditionLength + 0x1];
        ADD      R0,R5,#+1
        LSL      R0,R0,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
//   71 //  wstrncpy( condition, weatherConditions[num], conditionLength );
//   72   wstrncpy( condition, weatherConditions[num - 0x1], conditionLength );
        LDR      R1,[R4, #-4]
        MOV      R6,R0
        MOV      R2,R5
        SWI      +339
//   73   condition[conditionLength] = 0;
        ADD      R0,R6,R5, LSL #+1
        MOV      R1,#+0
        STRH     R1,[R0, #+0]
//   74   
//   75   return condition;         
        MOV      R0,R6
        POP      {R4-R6,PC}       ;; return
        DATA
??getWeatherConditions_1:
        DC32     weatherConditions
        CFI EndBlock cfiBlock11
//   76 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??getWeather??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE ??getWeather
//   77 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function ??getWeather
        ARM
//   78 Weather* getWeather(wchar_t* fileContent, int& pos) {
??getWeather:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        MOV      R4,R0
        MOV      R5,R1
//   79   int* states = new int[0x4];
        MOV      R0,#+16
        _BLF     `??operator new[]`,`??operator new[]??rA`
        MOV      R6,R0
//   80   for (int i=0;i<4;i++)
        MOV      R7,#+0
//   81     states[i] = getDayState(fileContent,pos);
??getWeather_1:
        MOV      R1,R5
        MOV      R0,R4
        BL       ??getDayState
        STR      R0,[R6, +R7, LSL #+2]
        ADD      R7,R7,#+1
        CMP      R7,#+4
        BLT      ??getWeather_1
//   82   wchar_t* dayState = getWeatherConditions(states[0x0]);
        LDR      R0,[R6, #+0]
        BL       ??getWeatherConditions
        MOV      R7,R0
//   83   wchar_t* windDirection = getEqualContent(fileContent,pos);
        MOV      R1,R5
        MOV      R0,R4
        BL       ??getEqualContent
//   84   Weather* todayWeather = new Weather(states[0x0],states[0x1],states[0x2],states[0x3],dayState,windDirection);
        PUSH     {R0}
        CFI CFA R13+24
        PUSH     {R7}
        CFI CFA R13+28
        LDR      R3,[R6, #+12]
        LDR      R0,[R6, #+0]
        LDR      R2,[R6, #+8]
        LDR      R1,[R6, #+4]
        _BLF     `??new Weather`,`??new Weather??rA`
        MOV      R4,R0
//   85   delete states; states = NULL;
        MOV      R0,R6
        _BLF     `??operator delete`,`??operator delete??rA`
//   86   
//   87   return todayWeather;
        MOV      R0,R4
        POP      {R1,R2,R4-R7,PC}  ;; return
        CFI EndBlock cfiBlock13
//   88 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??getDayWeather??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE ??getDayWeather
//   89 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function ??getDayWeather
        ARM
//   90 Weather* getDayWeather(wchar_t* fileContent, int& i) {
??getDayWeather:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        SUB      SP,SP,#+4
        CFI CFA R13+28
        MOV      R4,R0
        MOV      R5,R1
//   91     Weather* todayWeather = NULL;
        MOV      R6,#+0
        B        ??getDayWeather_1
//   92     while (i < wstrlen(fileContent)) {
//   93 
//   94       if (fileContent[i] == '<' && fileContent[i+0x1] == 'P') {
//   95         int sizeOfTag = 0;
//   96         wchar_t* tag = getTag(fileContent,i,sizeOfTag);
//   97         i += sizeOfTag;
//   98 
//   99         wchar_t* today = getDate();
//  100         if (compareWchar(tag,today))
//  101           todayWeather = getWeather(fileContent,i);
//  102         delete tag;
//  103         delete today;
//  104         if (todayWeather != NULL) break;
//  105        }
//  106       i++;
??getDayWeather_2:
        LDR      R0,[R5, #+0]
        ADD      R0,R0,#+1
        STR      R0,[R5, #+0]
??getDayWeather_1:
        MOV      R0,R4
        SWI      +343
        LDR      R1,[R5, #+0]
        CMP      R1,R0
        BGE      ??getDayWeather_3
        ADD      R0,R4,R1, LSL #+1
        LDRH     R1,[R0, #+0]
        CMP      R1,#+60
        LDRHEQ   R0,[R0, #+2]
        CMPEQ    R0,#+80
        BNE      ??getDayWeather_2
        MOV      R1,#+0
        STR      R1,[SP, #+0]
        LDR      R1,[R5, #+0]
        MOV      R2,SP
        MOV      R0,R4
        BL       ??getTag
        LDR      R1,[SP, #+0]
        MOV      R7,R0
        LDR      R0,[R5, #+0]
        ADD      R0,R1,R0
        STR      R0,[R5, #+0]
        BL       ??getDate
        MOV      R8,R0
        MOV      R1,R8
        MOV      R0,R7
        _BLF     ??compareWchar,??compareWchar??rA
        CMP      R0,#+0
        BEQ      ??getDayWeather_4
        MOV      R1,R5
        MOV      R0,R4
        BL       ??getWeather
        MOV      R6,R0
??getDayWeather_4:
        MOV      R0,R7
        _BLF     `??operator delete`,`??operator delete??rA`
        MOV      R0,R8
        _BLF     `??operator delete`,`??operator delete??rA`
        CMP      R6,#+0
        BEQ      ??getDayWeather_2
//  107     }
//  108     
//  109    return todayWeather;
??getDayWeather_3:
        MOV      R0,R6
        POP      {R1,R4-R8,PC}    ;; return
        CFI EndBlock cfiBlock15
//  110 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new[]??rA`:
        LDR      R12,??Subroutine8_0  ;; `??operator new[]`
        BX       R12
        DATA
??Subroutine8_0:
        DC32     `??operator new[]`
        CFI EndBlock cfiBlock16

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI NoFunction
        ARM
??wGetIndexOf??rA:
        LDR      R12,??Subroutine9_0  ;; ??wGetIndexOf
        BX       R12
        DATA
??Subroutine9_0:
        DC32     ??wGetIndexOf
        CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon1
        CFI NoFunction
        ARM
??getWSubStr??rA:
        LDR      R12,??Subroutine10_0  ;; ??getWSubStr
        BX       R12
        DATA
??Subroutine10_0:
        DC32     ??getWSubStr
        CFI EndBlock cfiBlock18

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator delete??rA`:
        LDR      R12,??Subroutine11_0  ;; `??operator delete`
        BX       R12
        DATA
??Subroutine11_0:
        DC32     `??operator delete`
        CFI EndBlock cfiBlock19

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon1
        CFI NoFunction
        ARM
`??new Weather??rA`:
        LDR      R12,??Subroutine12_0  ;; `??new Weather`
        BX       R12
        DATA
??Subroutine12_0:
        DC32     `??new Weather`
        CFI EndBlock cfiBlock20

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI NoFunction
        ARM
??compareWchar??rA:
        LDR      R12,??Subroutine13_0  ;; ??compareWchar
        BX       R12
        DATA
??Subroutine13_0:
        DC32     ??compareWchar
        CFI EndBlock cfiBlock21

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for weatherConditions>`:
        DATA
        DC32 `?<Constant L"\\x50\\x6c\\x65\\x6e\\x74\\x79\\x20\\x6f\\`
        DC32 `?<Constant L"\\x4d\\x6f\\x73\\x74\\x6c\\x79\\x20\\x53\\`
        DC32 `?<Constant L"\\x50\\x61\\x72\\x74\\x6c\\x79\\x20\\x53\\`
        DC32 `?<Constant L"\\x49\\x6e\\x74\\x65\\x72\\x6d\\x69\\x74\\`
        DC32 `?<Constant L"\\x48\\x61\\x7a\\x79\\x20\\x53\\x75\\x6e\\`
        DC32 `?<Constant L"\\x4d\\x6f\\x73\\x74\\x6c\\x79\\x20\\x43\\_1`
        DC32 `?<Constant L"\\x43\\x6c\\x6f\\x75\\x64\\x79">`
        DC32 `?<Constant L"\\x44\\x72\\x65\\x61\\x72\\x79">`, `?<Constant L"">`
        DC32 `?<Constant L"">`, `?<Constant L"\\x46\\x6f\\x67">`
        DC32 `?<Constant L"\\x53\\x68\\x6f\\x77\\x65\\x72\\x73">`
        DC32 `?<Constant L"\\x4d\\x6f\\x73\\x74\\x6c\\x79\\x20\\x43\\_2`
        DC32 `?<Constant L"\\x50\\x61\\x72\\x74\\x6c\\x79\\x20\\x53\\_1`
        DC32 `?<Constant L"\\x54\\x68\\x75\\x6e\\x64\\x65\\x72\\x73\\`
        DC32 `?<Constant L"\\x4d\\x6f\\x73\\x74\\x6c\\x79\\x20\\x43\\_3`
        DC32 `?<Constant L"\\x50\\x61\\x72\\x74\\x6c\\x79\\x20\\x53\\_2`
        DC32 `?<Constant L"\\x52\\x61\\x69\\x6e">`
        DC32 `?<Constant L"\\x46\\x6c\\x75\\x72\\x72\\x69\\x65\\x73"`
        DC32 `?<Constant L"\\x4d\\x6f\\x73\\x74\\x6c\\x79\\x20\\x43\\`
        DC32 `?<Constant L"\\x50\\x61\\x72\\x74\\x6c\\x79\\x20\\x53\\_3`
        DC32 `?<Constant L"\\x53\\x6e\\x6f\\x77">`
        DC32 `?<Constant L"\\x4d\\x6f\\x73\\x74\\x6c\\x79\\x20\\x43\\_4`
        DC32 `?<Constant L"\\x49\\x63\\x65">`
        DC32 `?<Constant L"\\x53\\x6c\\x65\\x65\\x74">`
        DC32 `?<Constant L"\\x46\\x72\\x65\\x65\\x7a\\x69\\x6e\\x67\\`
        DC32 `?<Constant L"">`, `?<Constant L"">`
        DC32 `?<Constant L"\\x52\\x61\\x69\\x6e\\x20\\x61\\x6e\\x64\\`
        DC32 `?<Constant L"\\x48\\x6f\\x74">`
        DC32 `?<Constant L"\\x43\\x6f\\x6c\\x64">`
        DC32 `?<Constant L"\\x57\\x69\\x6e\\x64\\x79">`
        DC32 `?<Constant L"\\x43\\x6c\\x65\\x61\\x72">`
        DC32 `?<Constant L"\\x4d\\x6f\\x73\\x74\\x6c\\x79\\x20\\x43\\_5`
        DC32 `?<Constant L"\\x50\\x61\\x72\\x74\\x6c\\x79\\x20\\x43\\`
        DC32 `?<Constant L"\\x49\\x6e\\x74\\x65\\x72\\x6d\\x69\\x74\\`
        DC32 `?<Constant L"\\x48\\x61\\x7a\\x79">`
        DC32 `?<Constant L"\\x4d\\x6f\\x73\\x74\\x6c\\x79\\x20\\x43\\_1`
        DC32 `?<Constant L"\\x50\\x61\\x72\\x74\\x6c\\x79\\x20\\x43\\_1`
        DC32 `?<Constant L"\\x4d\\x6f\\x73\\x74\\x6c\\x79\\x20\\x43\\_2`
        DC32 `?<Constant L"\\x50\\x61\\x72\\x74\\x6c\\x79\\x20\\x43\\_2`
        DC32 `?<Constant L"\\x4d\\x6f\\x73\\x74\\x6c\\x79\\x20\\x43\\_3`
        DC32 `?<Constant L"\\x4d\\x6f\\x73\\x74\\x6c\\x79\\x20\\x43\\`
        DC32 `?<Constant L"\\x4d\\x6f\\x73\\x74\\x6c\\x79\\x20\\x43\\_4`

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x4d\\x6f\\x73\\x74\\x6c\\x79\\x20\\x43\\`:
        DATA
        DC8 4DH, 0, 6FH, 0, 73H, 0, 74H, 0
        DC8 6CH, 0, 79H, 0, 20H, 0, 43H, 0
        DC8 6CH, 0, 6FH, 0, 75H, 0, 64H, 0
        DC8 79H, 0, 20H, 0, 77H, 0, 69H, 0
        DC8 74H, 0, 68H, 0, 20H, 0, 46H, 0
        DC8 6CH, 0, 75H, 0, 72H, 0, 72H, 0
        DC8 69H, 0, 65H, 0, 73H, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x50\\x6c\\x65\\x6e\\x74\\x79\\x20\\x6f\\`:
        DATA
        DC8 50H, 0, 6CH, 0, 65H, 0, 6EH, 0
        DC8 74H, 0, 79H, 0, 20H, 0, 6FH, 0
        DC8 66H, 0, 20H, 0, 73H, 0, 75H, 0
        DC8 6EH, 0, 73H, 0, 68H, 0, 69H, 0
        DC8 6EH, 0, 65H, 0, 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x4d\\x6f\\x73\\x74\\x6c\\x79\\x20\\x53\\`:
        DATA
        DC8 4DH, 0, 6FH, 0, 73H, 0, 74H, 0
        DC8 6CH, 0, 79H, 0, 20H, 0, 53H, 0
        DC8 75H, 0, 6EH, 0, 6EH, 0, 79H, 0
        DC8 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x50\\x61\\x72\\x74\\x6c\\x79\\x20\\x53\\`:
        DATA
        DC8 50H, 0, 61H, 0, 72H, 0, 74H, 0
        DC8 6CH, 0, 79H, 0, 20H, 0, 53H, 0
        DC8 75H, 0, 6EH, 0, 6EH, 0, 79H, 0
        DC8 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x49\\x6e\\x74\\x65\\x72\\x6d\\x69\\x74\\`:
        DATA
        DC8 49H, 0, 6EH, 0, 74H, 0, 65H, 0
        DC8 72H, 0, 6DH, 0, 69H, 0, 74H, 0
        DC8 74H, 0, 65H, 0, 6EH, 0, 74H, 0
        DC8 20H, 0, 43H, 0, 6CH, 0, 6FH, 0
        DC8 75H, 0, 64H, 0, 73H, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x48\\x61\\x7a\\x79\\x20\\x53\\x75\\x6e\\`:
        DATA
        DC8 48H, 0, 61H, 0, 7AH, 0, 79H, 0
        DC8 20H, 0, 53H, 0, 75H, 0, 6EH, 0
        DC8 73H, 0, 68H, 0, 69H, 0, 6EH, 0
        DC8 65H, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x4d\\x6f\\x73\\x74\\x6c\\x79\\x20\\x43\\_1`:
        DATA
        DC8 4DH, 0, 6FH, 0, 73H, 0, 74H, 0
        DC8 6CH, 0, 79H, 0, 20H, 0, 43H, 0
        DC8 6CH, 0, 6FH, 0, 75H, 0, 64H, 0
        DC8 79H, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x43\\x6c\\x6f\\x75\\x64\\x79">`:
        DATA
        DC8 43H, 0, 6CH, 0, 6FH, 0, 75H, 0
        DC8 64H, 0, 79H, 0, 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x44\\x72\\x65\\x61\\x72\\x79">`:
        DATA
        DC8 44H, 0, 72H, 0, 65H, 0, 61H, 0
        DC8 72H, 0, 79H, 0, 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(1)
`?<Constant L"">`:
        DATA
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x46\\x6f\\x67">`:
        DATA
        DC8 46H, 0, 6FH, 0, 67H, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x53\\x68\\x6f\\x77\\x65\\x72\\x73">`:
        DATA
        DC8 53H, 0, 68H, 0, 6FH, 0, 77H, 0
        DC8 65H, 0, 72H, 0, 73H, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x4d\\x6f\\x73\\x74\\x6c\\x79\\x20\\x43\\_2`:
        DATA
        DC8 4DH, 0, 6FH, 0, 73H, 0, 74H, 0
        DC8 6CH, 0, 79H, 0, 20H, 0, 43H, 0
        DC8 6CH, 0, 6FH, 0, 75H, 0, 64H, 0
        DC8 79H, 0, 20H, 0, 77H, 0, 69H, 0
        DC8 74H, 0, 68H, 0, 20H, 0, 53H, 0
        DC8 68H, 0, 6FH, 0, 77H, 0, 65H, 0
        DC8 72H, 0, 73H, 0, 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x50\\x61\\x72\\x74\\x6c\\x79\\x20\\x53\\_1`:
        DATA
        DC8 50H, 0, 61H, 0, 72H, 0, 74H, 0
        DC8 6CH, 0, 79H, 0, 20H, 0, 53H, 0
        DC8 75H, 0, 6EH, 0, 6EH, 0, 79H, 0
        DC8 20H, 0, 77H, 0, 69H, 0, 74H, 0
        DC8 68H, 0, 20H, 0, 53H, 0, 68H, 0
        DC8 6FH, 0, 77H, 0, 65H, 0, 72H, 0
        DC8 73H, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x54\\x68\\x75\\x6e\\x64\\x65\\x72\\x73\\`:
        DATA
        DC8 54H, 0, 68H, 0, 75H, 0, 6EH, 0
        DC8 64H, 0, 65H, 0, 72H, 0, 73H, 0
        DC8 74H, 0, 6FH, 0, 72H, 0, 6DH, 0
        DC8 73H, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x4d\\x6f\\x73\\x74\\x6c\\x79\\x20\\x43\\_3`:
        DATA
        DC8 4DH, 0, 6FH, 0, 73H, 0, 74H, 0
        DC8 6CH, 0, 79H, 0, 20H, 0, 43H, 0
        DC8 6CH, 0, 6FH, 0, 75H, 0, 64H, 0
        DC8 79H, 0, 20H, 0, 77H, 0, 69H, 0
        DC8 74H, 0, 68H, 0, 20H, 0, 54H, 0
        DC8 68H, 0, 75H, 0, 6EH, 0, 64H, 0
        DC8 65H, 0, 72H, 0, 20H, 0, 53H, 0
        DC8 68H, 0, 6FH, 0, 77H, 0, 65H, 0
        DC8 72H, 0, 73H, 0, 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x50\\x61\\x72\\x74\\x6c\\x79\\x20\\x53\\_2`:
        DATA
        DC8 50H, 0, 61H, 0, 72H, 0, 74H, 0
        DC8 6CH, 0, 79H, 0, 20H, 0, 53H, 0
        DC8 75H, 0, 6EH, 0, 6EH, 0, 79H, 0
        DC8 20H, 0, 77H, 0, 69H, 0, 74H, 0
        DC8 68H, 0, 20H, 0, 54H, 0, 68H, 0
        DC8 75H, 0, 6EH, 0, 64H, 0, 65H, 0
        DC8 72H, 0, 20H, 0, 53H, 0, 68H, 0
        DC8 6FH, 0, 77H, 0, 65H, 0, 72H, 0
        DC8 73H, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x52\\x61\\x69\\x6e">`:
        DATA
        DC8 52H, 0, 61H, 0, 69H, 0, 6EH, 0
        DC8 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x46\\x6c\\x75\\x72\\x72\\x69\\x65\\x73"`:
        DATA
        DC8 46H, 0, 6CH, 0, 75H, 0, 72H, 0
        DC8 72H, 0, 69H, 0, 65H, 0, 73H, 0
        DC8 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x25\\x64">`:
        DATA
        DC8 25H, 0, 64H, 0, 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x50\\x61\\x72\\x74\\x6c\\x79\\x20\\x53\\_3`:
        DATA
        DC8 50H, 0, 61H, 0, 72H, 0, 74H, 0
        DC8 6CH, 0, 79H, 0, 20H, 0, 53H, 0
        DC8 75H, 0, 6EH, 0, 6EH, 0, 79H, 0
        DC8 20H, 0, 77H, 0, 69H, 0, 74H, 0
        DC8 68H, 0, 20H, 0, 46H, 0, 6CH, 0
        DC8 75H, 0, 72H, 0, 72H, 0, 69H, 0
        DC8 65H, 0, 73H, 0, 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x53\\x6e\\x6f\\x77">`:
        DATA
        DC8 53H, 0, 6EH, 0, 6FH, 0, 77H, 0
        DC8 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x4d\\x6f\\x73\\x74\\x6c\\x79\\x20\\x43\\_4`:
        DATA
        DC8 4DH, 0, 6FH, 0, 73H, 0, 74H, 0
        DC8 6CH, 0, 79H, 0, 20H, 0, 43H, 0
        DC8 6CH, 0, 6FH, 0, 75H, 0, 64H, 0
        DC8 79H, 0, 20H, 0, 77H, 0, 69H, 0
        DC8 74H, 0, 68H, 0, 20H, 0, 53H, 0
        DC8 6EH, 0, 6FH, 0, 77H, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x49\\x63\\x65">`:
        DATA
        DC8 49H, 0, 63H, 0, 65H, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x53\\x6c\\x65\\x65\\x74">`:
        DATA
        DC8 53H, 0, 6CH, 0, 65H, 0, 65H, 0
        DC8 74H, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x46\\x72\\x65\\x65\\x7a\\x69\\x6e\\x67\\`:
        DATA
        DC8 46H, 0, 72H, 0, 65H, 0, 65H, 0
        DC8 7AH, 0, 69H, 0, 6EH, 0, 67H, 0
        DC8 20H, 0, 52H, 0, 61H, 0, 69H, 0
        DC8 6EH, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x52\\x61\\x69\\x6e\\x20\\x61\\x6e\\x64\\`:
        DATA
        DC8 52H, 0, 61H, 0, 69H, 0, 6EH, 0
        DC8 20H, 0, 61H, 0, 6EH, 0, 64H, 0
        DC8 20H, 0, 53H, 0, 6EH, 0, 6FH, 0
        DC8 77H, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x48\\x6f\\x74">`:
        DATA
        DC8 48H, 0, 6FH, 0, 74H, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x43\\x6f\\x6c\\x64">`:
        DATA
        DC8 43H, 0, 6FH, 0, 6CH, 0, 64H, 0
        DC8 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x57\\x69\\x6e\\x64\\x79">`:
        DATA
        DC8 57H, 0, 69H, 0, 6EH, 0, 64H, 0
        DC8 79H, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x43\\x6c\\x65\\x61\\x72">`:
        DATA
        DC8 43H, 0, 6CH, 0, 65H, 0, 61H, 0
        DC8 72H, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x4d\\x6f\\x73\\x74\\x6c\\x79\\x20\\x43\\_5`:
        DATA
        DC8 4DH, 0, 6FH, 0, 73H, 0, 74H, 0
        DC8 6CH, 0, 79H, 0, 20H, 0, 43H, 0
        DC8 6CH, 0, 65H, 0, 61H, 0, 72H, 0
        DC8 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x50\\x61\\x72\\x74\\x6c\\x79\\x20\\x43\\`:
        DATA
        DC8 50H, 0, 61H, 0, 72H, 0, 74H, 0
        DC8 6CH, 0, 79H, 0, 20H, 0, 43H, 0
        DC8 6CH, 0, 6FH, 0, 75H, 0, 64H, 0
        DC8 79H, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x48\\x61\\x7a\\x79">`:
        DATA
        DC8 48H, 0, 61H, 0, 7AH, 0, 79H, 0
        DC8 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x50\\x61\\x72\\x74\\x6c\\x79\\x20\\x43\\_1`:
        DATA
        DC8 50H, 0, 61H, 0, 72H, 0, 74H, 0
        DC8 6CH, 0, 79H, 0, 20H, 0, 43H, 0
        DC8 6CH, 0, 6FH, 0, 75H, 0, 64H, 0
        DC8 79H, 0, 20H, 0, 77H, 0, 69H, 0
        DC8 74H, 0, 68H, 0, 20H, 0, 53H, 0
        DC8 68H, 0, 6FH, 0, 77H, 0, 65H, 0
        DC8 72H, 0, 73H, 0, 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x50\\x61\\x72\\x74\\x6c\\x79\\x20\\x43\\_2`:
        DATA
        DC8 50H, 0, 61H, 0, 72H, 0, 74H, 0
        DC8 6CH, 0, 79H, 0, 20H, 0, 43H, 0
        DC8 6CH, 0, 6FH, 0, 75H, 0, 64H, 0
        DC8 79H, 0, 20H, 0, 77H, 0, 69H, 0
        DC8 74H, 0, 68H, 0, 20H, 0, 54H, 0
        DC8 68H, 0, 75H, 0, 6EH, 0, 64H, 0
        DC8 65H, 0, 72H, 0, 20H, 0, 53H, 0
        DC8 68H, 0, 6FH, 0, 77H, 0, 65H, 0
        DC8 72H, 0, 73H, 0, 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x3c\\x50\\x65\\x72\\x69\\x6f\\x64\\x20\\`:
        DATA
        DC8 3CH, 0, 50H, 0, 65H, 0, 72H, 0
        DC8 69H, 0, 6FH, 0, 64H, 0, 20H, 0
        DC8 53H, 0, 74H, 0, 61H, 0, 72H, 0
        DC8 74H, 0, 44H, 0, 61H, 0, 74H, 0
        DC8 65H, 0, 3DH, 0, 22H, 0, 25H, 0
        DC8 75H, 0, 2FH, 0, 25H, 0, 64H, 0
        DC8 2FH, 0, 25H, 0, 64H, 0, 22H, 0
        DC8 3EH, 0, 0, 0

        END
// 
//   984 bytes in segment CODE
// 1 114 bytes in segment DATA_C
//   176 bytes in segment DATA_I
//   176 bytes in segment DATA_ID
//    12 bytes in segment INITTAB
// 
//   880 bytes of CODE  memory (+ 116 bytes shared)
// 1 290 bytes of CONST memory
//   176 bytes of DATA  memory
//
//Errors: none
//Warnings: none
