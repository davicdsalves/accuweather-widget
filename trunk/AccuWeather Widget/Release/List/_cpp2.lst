##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    06/Jun/2011  22:25:08 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\Documents and Settings\Davi\Desktop\StudyElf\C++\ #
#                       _cpp2.cpp                                            #
#    Command line    =  "C:\Documents and Settings\Davi\Desktop\StudyElf\C++ #
#                       \_cpp2.cpp" -lC "C:\Documents and                    #
#                       Settings\Davi\Desktop\StudyElf\AccuWeather           #
#                       Widget\Release\List\" -lA "C:\Documents and          #
#                       Settings\Davi\Desktop\StudyElf\AccuWeather           #
#                       Widget\Release\List\" -o "C:\Documents and           #
#                       Settings\Davi\Desktop\StudyElf\AccuWeather           #
#                       Widget\Release\Obj\" -s9 --no_unroll --no_inline     #
#                       --cpu_mode arm --endian little --cpu ARM926EJ-S      #
#                       --stack_align 4 --interwork -e --fpu None --eec++    #
#                       --dlib_config "C:\Documents and                      #
#                       Settings\Davi\Desktop\IAR\Embedded Workbench 4.0     #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I "C:\Documents   #
#                       and Settings\Davi\Desktop\IAR\Embedded Workbench     #
#                       4.0 Evaluation\ARM\INC\"                             #
#    List file       =  C:\Documents and Settings\Davi\Desktop\StudyElf\Accu #
#                       Weather Widget\Release\List\_cpp2.lst                #
#    Object file     =  C:\Documents and Settings\Davi\Desktop\StudyElf\Accu #
#                       Weather Widget\Release\Obj\_cpp2.r79                 #
#                                                                            #
#                                                                            #
##############################################################################

C:\Documents and Settings\Davi\Desktop\StudyElf\C++\_cpp2.cpp
      1          #include "..\include\Lib_Clara.h"
      2          
      3          

   \                                 In segment CODE, align 4, keep-with-next
      4          void* operator new(size_t sz){return malloc(sz);};
   \                     `??operator new`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   030100EF           SWI      +259
   \   00000008   0080BDE8           POP      {PC}             ;; return

   \                                 In segment CODE, align 4, keep-with-next
      5          void* operator new[](size_t sz){return malloc(sz);};
   \                     `??operator new[]`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   030100EF           SWI      +259
   \   00000008   0080BDE8           POP      {PC}             ;; return

   \                                 In segment CODE, align 4, keep-with-next
      6          void operator delete(void * p){mfree(p);};
   \                     `??operator delete`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   040100EF           SWI      +260
   \   00000008   0080BDE8           POP      {PC}             ;; return

   \                                 In segment CODE, align 4, keep-with-next
      7          void operator delete[](void * p){mfree(p);};
   \                     `??operator delete[]`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   040100EF           SWI      +260
   \   00000008   0080BDE8           POP      {PC}             ;; return
      8          
      9          //placement version

   \                                 In segment CODE, align 4, keep-with-next
     10          void* operator new(size_t size, void* p){ return p; }
   \                     `??operator new_1`:
   \   00000000   0100A0E1           MOV      R0,R1
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
     11          void* operator new[](size_t size, void* p){ return p; }
   \                     `??operator new[]_1`:
   \   00000000   0100A0E1           MOV      R0,R1
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
     12          void operator delete (void*, void*) { }
   \                     `??operator delete_1`:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
     13          void operator delete[] (void*, void*) { }
   \                     `??operator delete[]_1`:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     operator delete(void *)            4
     operator delete(void *, void *)
                                        0
     operator delete[](void *)          4
     operator delete[](void *, void *)
                                        0
     operator new(size_t)               4
     operator new(size_t, void *)       0
     operator new[](size_t)             4
     operator new[](size_t, void *)     0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     operator new(size_t)             12
     operator new[](size_t)           12
     operator delete(void *)          12
     operator delete[](void *)        12
     operator new(size_t, void *)      8
     operator new[](size_t, void *)    8
     operator delete(void *, void *)
                                       4
     operator delete[](void *, void *)
                                       4
      Others                          32

 
 104 bytes in segment CODE
 
 72 bytes of CODE memory (+ 32 bytes shared)

Errors: none
Warnings: none
