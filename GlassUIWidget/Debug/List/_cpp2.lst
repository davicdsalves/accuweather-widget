##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    08/May/2011  19:48:28 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\Users\Faby\Desktop\StudyElf\C++\_cpp2.cpp         #
#    Command line    =  C:\Users\Faby\Desktop\StudyElf\C++\_cpp2.cpp -D      #
#                       OLDFUNCTIONS -lC C:\Users\Faby\Desktop\StudyElf\Glas #
#                       sUIWidget\Debug\List\ -lA                            #
#                       C:\Users\Faby\Desktop\StudyElf\GlassUIWidget\Debug\L #
#                       ist\ -o C:\Users\Faby\Desktop\StudyElf\GlassUIWidget #
#                       \Debug\Obj\ -z2 --no_cse --no_unroll --no_inline     #
#                       --no_code_motion --no_tbaa --no_clustering           #
#                       --no_scheduling --debug --cpu_mode arm --endian      #
#                       little --cpu ARM926EJ-S --stack_align 4 --interwork  #
#                       -e --fpu None --eec++ --dlib_config                  #
#                       "C:\Users\Faby\EmbebedIAR\Embedded Workbench 4.0     #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I                 #
#                       "C:\Users\Faby\EmbebedIAR\Embedded Workbench 4.0     #
#                       Evaluation\ARM\INC\"                                 #
#    List file       =  C:\Users\Faby\Desktop\StudyElf\GlassUIWidget\Debug\L #
#                       ist\_cpp2.lst                                        #
#    Object file     =  C:\Users\Faby\Desktop\StudyElf\GlassUIWidget\Debug\O #
#                       bj\_cpp2.r79                                         #
#                                                                            #
#                                                                            #
##############################################################################

C:\Users\Faby\Desktop\StudyElf\C++\_cpp2.cpp
      1          #include "..\include\Lib_Clara.h"
      2          
      3          

   \                                 In segment CODE, align 4, keep-with-next
      4          void* operator new(size_t sz){return malloc(sz);};
   \                     `??operator new`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   030100EF           SWI      +259
   \   00000010   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In segment CODE, align 4, keep-with-next
      5          void* operator new[](size_t sz){return malloc(sz);};
   \                     `??operator new[]`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   030100EF           SWI      +259
   \   00000010   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In segment CODE, align 4, keep-with-next
      6          void operator delete(void * p){mfree(p);};
   \                     `??operator delete`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   040100EF           SWI      +260
   \   00000010   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In segment CODE, align 4, keep-with-next
      7          void operator delete[](void * p){mfree(p);};
   \                     `??operator delete[]`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   040100EF           SWI      +260
   \   00000010   1080BDE8           POP      {R4,PC}          ;; return
      8          
      9          //placement version

   \                                 In segment CODE, align 4, keep-with-next
     10          void* operator new(size_t size, void* p){ return p; }
   \                     `??operator new_1`:
   \   00000000   0020B0E1           MOVS     R2,R0
   \   00000004   0100B0E1           MOVS     R0,R1
   \   00000008   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
     11          void* operator new[](size_t size, void* p){ return p; }
   \                     `??operator new[]_1`:
   \   00000000   0020B0E1           MOVS     R2,R0
   \   00000004   0100B0E1           MOVS     R0,R1
   \   00000008   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
     12          void operator delete (void*, void*) { }
   \                     `??operator delete_1`:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
     13          void operator delete[] (void*, void*) { }
   \                     `??operator delete[]_1`:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     operator delete(void *)            8
     operator delete(void *, void *)
                                        0
     operator delete[](void *)          8
     operator delete[](void *, void *)
                                        0
     operator new(size_t)               8
     operator new(size_t, void *)       0
     operator new[](size_t)             8
     operator new[](size_t, void *)     0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     operator new(size_t)             20
     operator new[](size_t)           20
     operator delete(void *)          20
     operator delete[](void *)        20
     operator new(size_t, void *)     12
     operator new[](size_t, void *)   12
     operator delete(void *, void *)
                                       4
     operator delete[](void *, void *)
                                       4
      Others                          32

 
 144 bytes in segment CODE
 
 112 bytes of CODE memory (+ 32 bytes shared)

Errors: none
Warnings: none
