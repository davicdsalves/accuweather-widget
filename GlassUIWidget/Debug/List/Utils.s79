//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   08/May/2011  19:48:27 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  C:\Users\Faby\Desktop\StudyElf\GlassUIWidget\utils\ /
//                       Utils.cpp                                           /
//    Command line    =  C:\Users\Faby\Desktop\StudyElf\GlassUIWidget\utils\ /
//                       Utils.cpp -D OLDFUNCTIONS -lC                       /
//                       C:\Users\Faby\Desktop\StudyElf\GlassUIWidget\Debug\ /
//                       List\ -lA C:\Users\Faby\Desktop\StudyElf\GlassUIWid /
//                       get\Debug\List\ -o C:\Users\Faby\Desktop\StudyElf\G /
//                       lassUIWidget\Debug\Obj\ -z2 --no_cse --no_unroll    /
//                       --no_inline --no_code_motion --no_tbaa              /
//                       --no_clustering --no_scheduling --debug --cpu_mode  /
//                       arm --endian little --cpu ARM926EJ-S --stack_align  /
//                       4 --interwork -e --fpu None --eec++ --dlib_config   /
//                       "C:\Users\Faby\EmbebedIAR\Embedded Workbench 4.0    /
//                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I                /
//                       "C:\Users\Faby\EmbebedIAR\Embedded Workbench 4.0    /
//                       Evaluation\ARM\INC\"                                /
//    List file       =  C:\Users\Faby\Desktop\StudyElf\GlassUIWidget\Debug\ /
//                       List\Utils.s79                                      /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME Utils

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        EXTERN ??div32_a

        MULTWEAK ??__dDiv??rA
        MULTWEAK ??__dMul??rA
        MULTWEAK ??__doubleToFloat??rA
        MULTWEAK ??__longToDouble??rA
        MULTWEAK ??__longToFloat??rA
        PUBLIC ??celsiusToFahrenheit
        FUNCTION ??celsiusToFahrenheit,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??celsiusToFahrenheit??rT
        PUBLIC ??compareWchar
        FUNCTION ??compareWchar,0203H
        LOCFRAME CSTACK, 16, STACK
        MULTWEAK ??compareWchar??rT
        PUBLIC ??getDateTime
        FUNCTION ??getDateTime,0203H
        LOCFRAME CSTACK, 16, STACK
        MULTWEAK ??getDateTime??rT
        PUBLIC ??getWSubStr
        FUNCTION ??getWSubStr,0203H
        LOCFRAME CSTACK, 24, STACK
        MULTWEAK ??getWSubStr??rT
        PUBLIC ??int2wstr
        FUNCTION ??int2wstr,0203H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??int2wstr??rT
        PUBLIC ??intlen
        FUNCTION ??intlen,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??intlen??rT
        PUBLIC ??isDateEqual
        FUNCTION ??isDateEqual,0203H
        MULTWEAK ??isDateEqual??rT
        PUBLIC ??km2Mile
        FUNCTION ??km2Mile,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??km2Mile??rT
        PUBLIC ??km2meter
        FUNCTION ??km2meter,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??km2meter??rT
        MULTWEAK `??operator new[]??rA`
        MULTWEAK ??rA??div32_a
        PUBLIC ??searchLine
        FUNCTION ??searchLine,0203H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??searchLine??rT
        PUBLIC ??showBox
        FUNCTION ??showBox,0203H
        LOCFRAME CSTACK, 20, STACK
        MULTWEAK ??showBox??rT
        PUBLIC ??wGetIndexOf
        FUNCTION ??wGetIndexOf,0203H
        LOCFRAME CSTACK, 28, STACK
        MULTWEAK ??wGetIndexOf??rT
        PUBLIC ??wGetIndexOfLine
        FUNCTION ??wGetIndexOfLine,0203H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??wGetIndexOfLine??rT
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        

__dDiv              SYMBOL "__dDiv"
__dMul              SYMBOL "__dMul"
__doubleToFloat     SYMBOL "__doubleToFloat"
__longToDouble      SYMBOL "__longToDouble"
__longToFloat       SYMBOL "__longToFloat"
??__dDiv??rA        SYMBOL "??rA", __dDiv
??__dMul??rA        SYMBOL "??rA", __dMul
??__doubleToFloat??rA SYMBOL "??rA", __doubleToFloat
??__longToDouble??rA SYMBOL "??rA", __longToDouble
??__longToFloat??rA SYMBOL "??rA", __longToFloat

??celsiusToFahrenheit??rT SYMBOL "??rT", ??celsiusToFahrenheit

??compareWchar??rT  SYMBOL "??rT", ??compareWchar

??getDateTime??rT   SYMBOL "??rT", ??getDateTime

??getWSubStr??rT    SYMBOL "??rT", ??getWSubStr

??int2wstr??rT      SYMBOL "??rT", ??int2wstr

??intlen??rT        SYMBOL "??rT", ??intlen

??isDateEqual??rT   SYMBOL "??rT", ??isDateEqual

??km2Mile??rT       SYMBOL "??rT", ??km2Mile

??km2meter??rT      SYMBOL "??rT", ??km2meter
`??operator new[]??rA` SYMBOL "??rA", `??operator new[]`

??searchLine??rT    SYMBOL "??rT", ??searchLine

??showBox??rT       SYMBOL "??rT", ??showBox

??wGetIndexOf??rT   SYMBOL "??rT", ??wGetIndexOf

??wGetIndexOfLine??rT SYMBOL "??rT", ??wGetIndexOfLine

        EXTERN `??operator new[]`
        FUNCTION `??operator new[]`,0202H
        EXTERN SYNC
        EXTERN __dDiv
        FUNCTION __dDiv,0202H
        EXTERN __dMul
        FUNCTION __dMul,0202H
        EXTERN __doubleToFloat
        FUNCTION __doubleToFloat,0202H
        EXTERN __longToDouble
        FUNCTION __longToDouble,0202H
        EXTERN __longToFloat
        FUNCTION __longToFloat,0202H


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??getWSubStr??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??getWSubStr
// C:\Users\Faby\Desktop\StudyElf\GlassUIWidget\utils\Utils.cpp
//    1 #include "..\..\include\Lib_Clara.h"
//    2 #include "..\..\include\Dir.h"
//    3 #include "utils.h"
//    4 
//    5 //<Day State="02">,12,13

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??getWSubStr
        ARM
//    6 wchar_t* getWSubStr(wchar_t* wString, int begin, int end) {
??getWSubStr:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//    7   if (begin < 0 || end < 0 || (end - begin) < 0) return NULL;
        CMP      R5,#+0
        BMI      ??getWSubStr_1
        CMP      R6,#+0
        BMI      ??getWSubStr_1
        SUBS     R0,R6,R5
        CMP      R0,#+0
        BPL      ??getWSubStr_2
??getWSubStr_1:
        MOV      R0,#+0
        B        ??getWSubStr_3
//    8   wchar_t* wSubStr = new wchar_t[end - begin + 0x2];
??getWSubStr_2:
        SUBS     R0,R6,R5
        ADDS     R0,R0,#+2
        MOV      R1,#+2
        MULS     R0,R1,R0
        _BLF     `??operator new[]`,`??operator new[]??rA`
        MOVS     R7,R0
//    9   int i;
//   10   for (i=0;i < (end - begin + 1); i++)
        MOV      R0,#+0
        MOVS     R8,R0
??getWSubStr_4:
        SUBS     R0,R6,R5
        ADDS     R0,R0,#+1
        CMP      R8,R0
        BGE      ??getWSubStr_5
//   11        wSubStr[i] = wString[begin + i];
        MOV      R0,#+2
        MLA      R1,R0,R8,R7
        ADDS     R0,R8,R5
        MOV      R2,#+2
        MLA      R0,R2,R0,R4
        LDRH     R0,[R0, #+0]
        STRH     R0,[R1, #+0]
        ADDS     R8,R8,#+1
        B        ??getWSubStr_4
//   12   wSubStr[i] = 0;
??getWSubStr_5:
        MOV      R0,#+2
        MLA      R1,R0,R8,R7
        MOV      R0,#+0
        STRH     R0,[R1, #+0]
//   13   return wSubStr;
        MOVS     R0,R7
??getWSubStr_3:
        POP      {R4-R8,PC}       ;; return
        CFI EndBlock cfiBlock1
//   14 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??wGetIndexOfLine??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??wGetIndexOfLine
//   15 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??wGetIndexOfLine
        ARM
//   16 int wGetIndexOfLine(wchar_t* string) {
??wGetIndexOfLine:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOVS     R4,R0
//   17   for (int i=0;i<wstrlen(string);i++) {
        MOV      R0,#+0
        MOVS     R5,R0
??wGetIndexOfLine_1:
        MOVS     R0,R4
        SWI      +343
        CMP      R5,R0
        BGE      ??wGetIndexOfLine_2
//   18 	if (string[i] == '\\' && string[i+0x1] == 'n')
        MOV      R0,#+2
        MLA      R1,R0,R5,R4
        LDRH     R0,[R1, #+0]
        CMP      R0,#+92
        BNE      ??wGetIndexOfLine_3
        MOV      R0,#+2
        MLA      R1,R0,R5,R4
        LDRH     R0,[R1, #+2]
        CMP      R0,#+110
        BNE      ??wGetIndexOfLine_3
//   19           return i;
        MOVS     R0,R5
        B        ??wGetIndexOfLine_4
//   20   }
??wGetIndexOfLine_3:
        ADDS     R5,R5,#+1
        B        ??wGetIndexOfLine_1
//   21   return 0;  
??wGetIndexOfLine_2:
        MOV      R0,#+0
??wGetIndexOfLine_4:
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock3
//   22 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??searchLine??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??searchLine
//   23 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??searchLine
        ARM
//   24 bool searchLine(wchar_t* string) {
??searchLine:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOVS     R4,R0
//   25   for (int i=0;i<wstrlen(string);i++)
        MOV      R0,#+0
        MOVS     R5,R0
??searchLine_1:
        MOVS     R0,R4
        SWI      +343
        CMP      R5,R0
        BGE      ??searchLine_2
//   26     if (string[i] == '\\' && string[i+0x1] == 'n') return true;
        MOV      R0,#+2
        MLA      R1,R0,R5,R4
        LDRH     R0,[R1, #+0]
        CMP      R0,#+92
        BNE      ??searchLine_3
        MOV      R0,#+2
        MLA      R1,R0,R5,R4
        LDRH     R0,[R1, #+2]
        CMP      R0,#+110
        BNE      ??searchLine_3
        MOV      R0,#+1
        B        ??searchLine_4
??searchLine_3:
        ADDS     R5,R5,#+1
        B        ??searchLine_1
//   27   return false;
??searchLine_2:
        MOV      R0,#+0
??searchLine_4:
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock5
//   28 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??wGetIndexOf??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??wGetIndexOf
//   29 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??wGetIndexOf
        ARM
//   30 int wGetIndexOf(wchar_t* string, char search, int time, int from) {
??wGetIndexOf:
        PUSH     {R4-R9,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R9 Frame(CFA, -8)
        CFI R8 Frame(CFA, -12)
        CFI R7 Frame(CFA, -16)
        CFI R6 Frame(CFA, -20)
        CFI R5 Frame(CFA, -24)
        CFI R4 Frame(CFA, -28)
        CFI CFA R13+28
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
        MOVS     R7,R3
//   31   int found = 0;
        MOV      R0,#+0
        MOVS     R8,R0
//   32   for (int i=0;i<wstrlen(string);i++) {
        MOV      R0,#+0
        MOVS     R9,R0
??wGetIndexOf_1:
        MOVS     R0,R4
        SWI      +343
        CMP      R9,R0
        BGE      ??wGetIndexOf_2
//   33 	if (string[i + from] == search){
        ADDS     R0,R7,R9
        MOV      R1,#+2
        MLA      R0,R1,R0,R4
        LDRH     R0,[R0, #+0]
        MOVS     R1,R5
        MOV      R1,R1, LSL #+16
        MOVS     R1,R1, LSR #+16
        CMP      R0,R1
        BNE      ??wGetIndexOf_3
//   34 	  found++;
        ADDS     R8,R8,#+1
//   35 	  if (found == time) return i+from;
        CMP      R8,R6
        BNE      ??wGetIndexOf_3
        ADDS     R0,R7,R9
        B        ??wGetIndexOf_4
//   36 	}
//   37   }
??wGetIndexOf_3:
        ADDS     R9,R9,#+1
        B        ??wGetIndexOf_1
//   38   return 0;
??wGetIndexOf_2:
        MOV      R0,#+0
??wGetIndexOf_4:
        POP      {R4-R9,PC}       ;; return
        CFI EndBlock cfiBlock7
//   39 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??compareWchar??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE ??compareWchar
//   40 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function ??compareWchar
        ARM
//   41 bool compareWchar(wchar_t* tagFound, wchar_t* todayTag) {
??compareWchar:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOVS     R4,R0
        MOVS     R5,R1
//   42   for (int i=0;i<wstrlen(tagFound) && i<wstrlen(todayTag);i++)
        MOV      R0,#+0
        MOVS     R6,R0
??compareWchar_1:
        MOVS     R0,R4
        SWI      +343
        CMP      R6,R0
        BGE      ??compareWchar_2
        MOVS     R0,R5
        SWI      +343
        CMP      R6,R0
        BGE      ??compareWchar_2
//   43     if (tagFound[i] != todayTag[i]) return false;
        MOV      R0,#+2
        MLA      R1,R0,R6,R4
        LDRH     R0,[R1, #+0]
        MOV      R1,#+2
        MLA      R2,R1,R6,R5
        LDRH     R1,[R2, #+0]
        CMP      R0,R1
        BEQ      ??compareWchar_3
        MOV      R0,#+0
        B        ??compareWchar_4
??compareWchar_3:
        ADDS     R6,R6,#+1
        B        ??compareWchar_1
//   44   return true;
??compareWchar_2:
        MOV      R0,#+1
??compareWchar_4:
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock9
//   45 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??intlen??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE ??intlen
//   46 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function ??intlen
        ARM
//   47 int intlen(int start) {
??intlen:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOVS     R1,R0
//   48     int end = 0;
        MOV      R0,#+0
        MOVS     R2,R0
//   49     while(start > 0) {
??intlen_1:
        CMP      R1,#+1
        BLT      ??intlen_2
//   50         start = start/10;
        MOVS     R0,R1
        MOV      R1,#+10
        _BLF     ??div32_a,??rA??div32_a
//   51         end++;
        ADDS     R2,R2,#+1
        B        ??intlen_1
//   52     }
//   53     return end;
??intlen_2:
        MOVS     R0,R2
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock11
//   54 }  

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??getDateTime??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE ??getDateTime
//   55 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function ??getDateTime
        ARM
//   56 DATETIME getDateTime() { //"2011/3/20"
??getDateTime:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        SUB      SP,SP,#+8
        CFI CFA R13+16
        MOVS     R4,R0
//   57   DATETIME dt;
//   58   REQUEST_DATEANDTIME_GET(SYNC,&dt);
        MOVS     R1,SP
        LDR      R0,??getDateTime_1  ;; SYNC
        LDR      R0,[R0, #+0]
        SWI      +366
//   59   return dt;
        MOVS     R0,SP
        MOV      R2,#+8
??getDateTime_2:
        SUBS     R2,R2,#+2
        LDRH     R1,[R0, R2]
        STRH     R1,[R4, R2]
        BNE      ??getDateTime_2
        MOVS     R0,R4
        ADD      SP,SP,#+8        ;; stack cleaning
        CFI CFA R13+8
        POP      {R4,PC}          ;; return
        DATA
??getDateTime_1:
        DC32     SYNC
        CFI EndBlock cfiBlock13
//   60 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??int2wstr??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE ??int2wstr
//   61 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function ??int2wstr
        ARM
//   62 wchar_t* int2wstr(int num) {
??int2wstr:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOVS     R4,R0
//   63   wchar_t* number = new wchar_t[intlen(num) + 0x1];
        MOVS     R0,R4
        BL       ??intlen
        ADDS     R0,R0,#+1
        MOV      R1,#+2
        MULS     R0,R1,R0
        _BLF     `??operator new[]`,`??operator new[]??rA`
        MOVS     R5,R0
//   64   snwprintf(number,intlen(num),L"%d",num);
        MOVS     R0,R4
        BL       ??intlen
        MOVS     R1,R0
        MOVS     R3,R4
        LDR      R2,??int2wstr_1  ;; `?<Constant L"\\x25\\x64">`
        MOVS     R0,R5
        SWI      +277
//   65   number[intlen(num)] = 0;
        MOVS     R0,R4
        BL       ??intlen
        MOV      R1,#+2
        MLA      R0,R1,R0,R5
        MOV      R1,#+0
        STRH     R1,[R0, #+0]
//   66   return number;
        MOVS     R0,R5
        POP      {R4,R5,PC}       ;; return
        DATA
??int2wstr_1:
        DC32     `?<Constant L"\\x25\\x64">`
        CFI EndBlock cfiBlock15
//   67 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        THUMB
??isDateEqual??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock16
        REQUIRE ??isDateEqual
//   68 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function ??isDateEqual
        ARM
//   69 bool isDateEqual(DATETIME* r1, DATETIME* r2) {
//   70   int dif = r1->date.year - r2->date.year;
??isDateEqual:
        LDRH     R3,[R0, #+0]
        LDRH     R12,[R1, #+0]
        SUBS     R3,R3,R12
        MOVS     R2,R3
//   71   if (dif == 0) {
        CMP      R2,#+0
        BNE      ??isDateEqual_1
//   72     dif = r1->date.mon - r2->date.mon;
        LDRB     R3,[R0, #+2]
        LDRB     R12,[R1, #+2]
        SUBS     R3,R3,R12
        MOVS     R2,R3
//   73     if (dif == 0) dif = r1->date.day - r2->date.day;
        CMP      R2,#+0
        BNE      ??isDateEqual_1
        LDRB     R3,[R0, #+3]
        LDRB     R12,[R1, #+3]
        SUBS     R3,R3,R12
        MOVS     R2,R3
//   74   }
//   75   return dif;
??isDateEqual_1:
        CMP      R2,#+0
        BEQ      ??isDateEqual_2
        MOV      R0,#+1
        B        ??isDateEqual_3
??isDateEqual_2:
        MOV      R0,#+0
??isDateEqual_3:
        BX       LR               ;; return
        CFI EndBlock cfiBlock17
//   76 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        THUMB
??celsiusToFahrenheit??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock18
        REQUIRE ??celsiusToFahrenheit
//   77 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI Function ??celsiusToFahrenheit
        ARM
//   78 float celsiusToFahrenheit(int celsius) {
??celsiusToFahrenheit:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//   79   return (celsius * 9 / 5) + 32;
        ADDS     R0,R0,R0, LSL #+3
        MOV      R1,#+5
        _BLF     ??div32_a,??rA??div32_a
        ADDS     R0,R1,#+32
        _BLF     __longToFloat,??__longToFloat??rA
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock19
//   80 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        THUMB
??km2Mile??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock20
        REQUIRE ??km2Mile
//   81 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI Function ??km2Mile
        ARM
//   82 float km2Mile(int km) {
??km2Mile:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//   83   return (km * 0.6214);
        _BLF     __longToDouble,??__longToDouble??rA
        LDR      R2,??km2Mile_1   ;; 0x40b78034
        LDR      R3,??km2Mile_1+0x4  ;; 0x3fe3e282
        _BLF     __dMul,??__dMul??rA
        _BLF     __doubleToFloat,??__doubleToFloat??rA
        POP      {PC}             ;; return
        DATA
??km2Mile_1:
        DC32     0x40b78034
        DC32     0x3fe3e282
        CFI EndBlock cfiBlock21
//   84 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon0
        CFI NoFunction
        THUMB
??km2meter??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock22
        REQUIRE ??km2meter
//   85 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon1
        CFI Function ??km2meter
        ARM
//   86 float km2meter(int km) {
??km2meter:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//   87   return (km / 3.6);
        _BLF     __longToDouble,??__longToDouble??rA
        LDR      R2,??km2meter_1  ;; 0xffffffffcccccccd
        LDR      R3,??km2meter_1+0x4  ;; 0x400ccccc
        _BLF     __dDiv,??__dDiv??rA
        _BLF     __doubleToFloat,??__doubleToFloat??rA
        POP      {PC}             ;; return
        DATA
??km2meter_1:
        DC32     0xffffffffcccccccd
        DC32     0x400ccccc
        CFI EndBlock cfiBlock23
//   88 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock24 Using cfiCommon0
        CFI NoFunction
        THUMB
??showBox??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock24
        REQUIRE ??showBox
//   89 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock25 Using cfiCommon1
        CFI Function ??showBox
        ARM
//   90 void showBox(wchar_t* message, int time) {
??showBox:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOVS     R4,R0
        MOVS     R5,R1
//   91   MessageBox(0x6FFFFFFF,TextID_Create(message,ENC_UCS2 , wstrlen(message)), NOIMAGE, 1, time,0);
        MOVS     R0,R4
        SWI      +343
        MOVS     R2,R0
        MOV      R1,#+0
        MOVS     R0,R4
        SWI      +349
        MOVS     R1,R0
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+16
        MOVS     R0,R5
        PUSH     {R0}
        CFI CFA R13+20
        MOV      R3,#+1
        MOV      R2,#+255
        ORR      R2,R2,#0xFF00
        MVN      R0,#-1879048192
        SWI      +599
        ADD      SP,SP,#+8        ;; stack cleaning
        CFI CFA R13+12
//   92   message = NULL;
        MOV      R0,#+0
        MOVS     R4,R0
//   93   delay(time);
        MOVS     R0,R5
        SWI      +389
//   94 }
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock25

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock26 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new[]??rA`:
        LDR      R12,??Subroutine13_0  ;; `??operator new[]`
        BX       R12
        DATA
??Subroutine13_0:
        DC32     `??operator new[]`
        CFI EndBlock cfiBlock26

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock27 Using cfiCommon1
        CFI NoFunction
        ARM
??rA??div32_a:
        LDR      R12,??Subroutine14_0  ;; ??div32_a
        MOV      PC,R12
        DATA
??Subroutine14_0:
        DC32     ??div32_a
        CFI EndBlock cfiBlock27

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock28 Using cfiCommon1
        CFI NoFunction
        ARM
??__longToFloat??rA:
        LDR      R3,??Subroutine15_0  ;; __longToFloat
        BX       R3
        DATA
??Subroutine15_0:
        DC32     __longToFloat
        CFI EndBlock cfiBlock28

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock29 Using cfiCommon1
        CFI NoFunction
        ARM
??__longToDouble??rA:
        LDR      R3,??Subroutine16_0  ;; __longToDouble
        BX       R3
        DATA
??Subroutine16_0:
        DC32     __longToDouble
        CFI EndBlock cfiBlock29

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock30 Using cfiCommon1
        CFI NoFunction
        ARM
??__dMul??rA:
        LDR      R12,??Subroutine17_0  ;; __dMul
        BX       R12
        DATA
??Subroutine17_0:
        DC32     __dMul
        CFI EndBlock cfiBlock30

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock31 Using cfiCommon1
        CFI NoFunction
        ARM
??__doubleToFloat??rA:
        LDR      R3,??Subroutine18_0  ;; __doubleToFloat
        BX       R3
        DATA
??Subroutine18_0:
        DC32     __doubleToFloat
        CFI EndBlock cfiBlock31

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock32 Using cfiCommon1
        CFI NoFunction
        ARM
??__dDiv??rA:
        LDR      R12,??Subroutine19_0  ;; __dDiv
        BX       R12
        DATA
??Subroutine19_0:
        DC32     __dDiv
        CFI EndBlock cfiBlock32

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x25\\x64">`:
        DATA
        DC8 25H, 0, 64H, 0, 0, 0
        DC8 0, 0

        END
// 
// 1 228 bytes in segment CODE
//     8 bytes in segment DATA_C
// 
// 1 092 bytes of CODE  memory (+ 136 bytes shared)
//     8 bytes of CONST memory
//
//Errors: none
//Warnings: none
