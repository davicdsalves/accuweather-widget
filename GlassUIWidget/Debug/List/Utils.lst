##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    08/May/2011  19:48:27 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\Users\Faby\Desktop\StudyElf\GlassUIWidget\utils\U #
#                       tils.cpp                                             #
#    Command line    =  C:\Users\Faby\Desktop\StudyElf\GlassUIWidget\utils\U #
#                       tils.cpp -D OLDFUNCTIONS -lC                         #
#                       C:\Users\Faby\Desktop\StudyElf\GlassUIWidget\Debug\L #
#                       ist\ -lA C:\Users\Faby\Desktop\StudyElf\GlassUIWidge #
#                       t\Debug\List\ -o C:\Users\Faby\Desktop\StudyElf\Glas #
#                       sUIWidget\Debug\Obj\ -z2 --no_cse --no_unroll        #
#                       --no_inline --no_code_motion --no_tbaa               #
#                       --no_clustering --no_scheduling --debug --cpu_mode   #
#                       arm --endian little --cpu ARM926EJ-S --stack_align   #
#                       4 --interwork -e --fpu None --eec++ --dlib_config    #
#                       "C:\Users\Faby\EmbebedIAR\Embedded Workbench 4.0     #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I                 #
#                       "C:\Users\Faby\EmbebedIAR\Embedded Workbench 4.0     #
#                       Evaluation\ARM\INC\"                                 #
#    List file       =  C:\Users\Faby\Desktop\StudyElf\GlassUIWidget\Debug\L #
#                       ist\Utils.lst                                        #
#    Object file     =  C:\Users\Faby\Desktop\StudyElf\GlassUIWidget\Debug\O #
#                       bj\Utils.r79                                         #
#                                                                            #
#                                                                            #
##############################################################################

C:\Users\Faby\Desktop\StudyElf\GlassUIWidget\utils\Utils.cpp
      1          #include "..\..\include\Lib_Clara.h"
      2          #include "..\..\include\Dir.h"
      3          #include "utils.h"
      4          
      5          //<Day State="02">,12,13

   \                                 In segment CODE, align 4, keep-with-next
      6          wchar_t* getWSubStr(wchar_t* wString, int begin, int end) {
   \                     ??getWSubStr:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
      7            if (begin < 0 || end < 0 || (end - begin) < 0) return NULL;
   \   00000010   000055E3           CMP      R5,#+0
   \   00000014   0400004A           BMI      ??getWSubStr_1
   \   00000018   000056E3           CMP      R6,#+0
   \   0000001C   0200004A           BMI      ??getWSubStr_1
   \   00000020   050056E0           SUBS     R0,R6,R5
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0100005A           BPL      ??getWSubStr_2
   \                     ??getWSubStr_1:
   \   0000002C   0000A0E3           MOV      R0,#+0
   \   00000030   190000EA           B        ??getWSubStr_3
      8            wchar_t* wSubStr = new wchar_t[end - begin + 0x2];
   \                     ??getWSubStr_2:
   \   00000034   050056E0           SUBS     R0,R6,R5
   \   00000038   020090E2           ADDS     R0,R0,#+2
   \   0000003C   0210A0E3           MOV      R1,#+2
   \   00000040   910010E0           MULS     R0,R1,R0
   \   00000044   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
   \   00000048   0070B0E1           MOVS     R7,R0
      9            int i;
     10            for (i=0;i < (end - begin + 1); i++)
   \   0000004C   0000A0E3           MOV      R0,#+0
   \   00000050   0080B0E1           MOVS     R8,R0
   \                     ??getWSubStr_4:
   \   00000054   050056E0           SUBS     R0,R6,R5
   \   00000058   010090E2           ADDS     R0,R0,#+1
   \   0000005C   000058E1           CMP      R8,R0
   \   00000060   080000AA           BGE      ??getWSubStr_5
     11                 wSubStr[i] = wString[begin + i];
   \   00000064   0200A0E3           MOV      R0,#+2
   \   00000068   907821E0           MLA      R1,R0,R8,R7
   \   0000006C   050098E0           ADDS     R0,R8,R5
   \   00000070   0220A0E3           MOV      R2,#+2
   \   00000074   924020E0           MLA      R0,R2,R0,R4
   \   00000078   B000D0E1           LDRH     R0,[R0, #+0]
   \   0000007C   B000C1E1           STRH     R0,[R1, #+0]
   \   00000080   018098E2           ADDS     R8,R8,#+1
   \   00000084   F2FFFFEA           B        ??getWSubStr_4
     12            wSubStr[i] = 0;
   \                     ??getWSubStr_5:
   \   00000088   0200A0E3           MOV      R0,#+2
   \   0000008C   907821E0           MLA      R1,R0,R8,R7
   \   00000090   0000A0E3           MOV      R0,#+0
   \   00000094   B000C1E1           STRH     R0,[R1, #+0]
     13            return wSubStr;
   \   00000098   0700B0E1           MOVS     R0,R7
   \                     ??getWSubStr_3:
   \   0000009C   F081BDE8           POP      {R4-R8,PC}       ;; return
     14          }
     15          

   \                                 In segment CODE, align 4, keep-with-next
     16          int wGetIndexOfLine(wchar_t* string) {
   \                     ??wGetIndexOfLine:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
     17            for (int i=0;i<wstrlen(string);i++) {
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   0050B0E1           MOVS     R5,R0
   \                     ??wGetIndexOfLine_1:
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   570100EF           SWI      +343
   \   00000018   000055E1           CMP      R5,R0
   \   0000001C   0D0000AA           BGE      ??wGetIndexOfLine_2
     18          	if (string[i] == '\\' && string[i+0x1] == 'n')
   \   00000020   0200A0E3           MOV      R0,#+2
   \   00000024   904521E0           MLA      R1,R0,R5,R4
   \   00000028   B000D1E1           LDRH     R0,[R1, #+0]
   \   0000002C   5C0050E3           CMP      R0,#+92
   \   00000030   0600001A           BNE      ??wGetIndexOfLine_3
   \   00000034   0200A0E3           MOV      R0,#+2
   \   00000038   904521E0           MLA      R1,R0,R5,R4
   \   0000003C   B200D1E1           LDRH     R0,[R1, #+2]
   \   00000040   6E0050E3           CMP      R0,#+110
   \   00000044   0100001A           BNE      ??wGetIndexOfLine_3
     19                    return i;
   \   00000048   0500B0E1           MOVS     R0,R5
   \   0000004C   020000EA           B        ??wGetIndexOfLine_4
     20            }
   \                     ??wGetIndexOfLine_3:
   \   00000050   015095E2           ADDS     R5,R5,#+1
   \   00000054   EDFFFFEA           B        ??wGetIndexOfLine_1
     21            return 0;  
   \                     ??wGetIndexOfLine_2:
   \   00000058   0000A0E3           MOV      R0,#+0
   \                     ??wGetIndexOfLine_4:
   \   0000005C   3080BDE8           POP      {R4,R5,PC}       ;; return
     22          }
     23          

   \                                 In segment CODE, align 4, keep-with-next
     24          bool searchLine(wchar_t* string) {
   \                     ??searchLine:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
     25            for (int i=0;i<wstrlen(string);i++)
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   0050B0E1           MOVS     R5,R0
   \                     ??searchLine_1:
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   570100EF           SWI      +343
   \   00000018   000055E1           CMP      R5,R0
   \   0000001C   0D0000AA           BGE      ??searchLine_2
     26              if (string[i] == '\\' && string[i+0x1] == 'n') return true;
   \   00000020   0200A0E3           MOV      R0,#+2
   \   00000024   904521E0           MLA      R1,R0,R5,R4
   \   00000028   B000D1E1           LDRH     R0,[R1, #+0]
   \   0000002C   5C0050E3           CMP      R0,#+92
   \   00000030   0600001A           BNE      ??searchLine_3
   \   00000034   0200A0E3           MOV      R0,#+2
   \   00000038   904521E0           MLA      R1,R0,R5,R4
   \   0000003C   B200D1E1           LDRH     R0,[R1, #+2]
   \   00000040   6E0050E3           CMP      R0,#+110
   \   00000044   0100001A           BNE      ??searchLine_3
   \   00000048   0100A0E3           MOV      R0,#+1
   \   0000004C   020000EA           B        ??searchLine_4
   \                     ??searchLine_3:
   \   00000050   015095E2           ADDS     R5,R5,#+1
   \   00000054   EDFFFFEA           B        ??searchLine_1
     27            return false;
   \                     ??searchLine_2:
   \   00000058   0000A0E3           MOV      R0,#+0
   \                     ??searchLine_4:
   \   0000005C   3080BDE8           POP      {R4,R5,PC}       ;; return
     28          }
     29          

   \                                 In segment CODE, align 4, keep-with-next
     30          int wGetIndexOf(wchar_t* string, char search, int time, int from) {
   \                     ??wGetIndexOf:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0370B0E1           MOVS     R7,R3
     31            int found = 0;
   \   00000014   0000A0E3           MOV      R0,#+0
   \   00000018   0080B0E1           MOVS     R8,R0
     32            for (int i=0;i<wstrlen(string);i++) {
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   0090B0E1           MOVS     R9,R0
   \                     ??wGetIndexOf_1:
   \   00000024   0400B0E1           MOVS     R0,R4
   \   00000028   570100EF           SWI      +343
   \   0000002C   000059E1           CMP      R9,R0
   \   00000030   0F0000AA           BGE      ??wGetIndexOf_2
     33          	if (string[i + from] == search){
   \   00000034   090097E0           ADDS     R0,R7,R9
   \   00000038   0210A0E3           MOV      R1,#+2
   \   0000003C   914020E0           MLA      R0,R1,R0,R4
   \   00000040   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000044   0510B0E1           MOVS     R1,R5
   \   00000048   0118A0E1           MOV      R1,R1, LSL #+16
   \   0000004C   2118B0E1           MOVS     R1,R1, LSR #+16
   \   00000050   010050E1           CMP      R0,R1
   \   00000054   0400001A           BNE      ??wGetIndexOf_3
     34          	  found++;
   \   00000058   018098E2           ADDS     R8,R8,#+1
     35          	  if (found == time) return i+from;
   \   0000005C   060058E1           CMP      R8,R6
   \   00000060   0100001A           BNE      ??wGetIndexOf_3
   \   00000064   090097E0           ADDS     R0,R7,R9
   \   00000068   020000EA           B        ??wGetIndexOf_4
     36          	}
     37            }
   \                     ??wGetIndexOf_3:
   \   0000006C   019099E2           ADDS     R9,R9,#+1
   \   00000070   EBFFFFEA           B        ??wGetIndexOf_1
     38            return 0;
   \                     ??wGetIndexOf_2:
   \   00000074   0000A0E3           MOV      R0,#+0
   \                     ??wGetIndexOf_4:
   \   00000078   F083BDE8           POP      {R4-R9,PC}       ;; return
     39          }
     40          

   \                                 In segment CODE, align 4, keep-with-next
     41          bool compareWchar(wchar_t* tagFound, wchar_t* todayTag) {
   \                     ??compareWchar:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
     42            for (int i=0;i<wstrlen(tagFound) && i<wstrlen(todayTag);i++)
   \   0000000C   0000A0E3           MOV      R0,#+0
   \   00000010   0060B0E1           MOVS     R6,R0
   \                     ??compareWchar_1:
   \   00000014   0400B0E1           MOVS     R0,R4
   \   00000018   570100EF           SWI      +343
   \   0000001C   000056E1           CMP      R6,R0
   \   00000020   0F0000AA           BGE      ??compareWchar_2
   \   00000024   0500B0E1           MOVS     R0,R5
   \   00000028   570100EF           SWI      +343
   \   0000002C   000056E1           CMP      R6,R0
   \   00000030   0B0000AA           BGE      ??compareWchar_2
     43              if (tagFound[i] != todayTag[i]) return false;
   \   00000034   0200A0E3           MOV      R0,#+2
   \   00000038   904621E0           MLA      R1,R0,R6,R4
   \   0000003C   B000D1E1           LDRH     R0,[R1, #+0]
   \   00000040   0210A0E3           MOV      R1,#+2
   \   00000044   915622E0           MLA      R2,R1,R6,R5
   \   00000048   B010D2E1           LDRH     R1,[R2, #+0]
   \   0000004C   010050E1           CMP      R0,R1
   \   00000050   0100000A           BEQ      ??compareWchar_3
   \   00000054   0000A0E3           MOV      R0,#+0
   \   00000058   020000EA           B        ??compareWchar_4
   \                     ??compareWchar_3:
   \   0000005C   016096E2           ADDS     R6,R6,#+1
   \   00000060   EBFFFFEA           B        ??compareWchar_1
     44            return true;
   \                     ??compareWchar_2:
   \   00000064   0100A0E3           MOV      R0,#+1
   \                     ??compareWchar_4:
   \   00000068   7080BDE8           POP      {R4-R6,PC}       ;; return
     45          }
     46          

   \                                 In segment CODE, align 4, keep-with-next
     47          int intlen(int start) {
   \                     ??intlen:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0010B0E1           MOVS     R1,R0
     48              int end = 0;
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   0020B0E1           MOVS     R2,R0
     49              while(start > 0) {
   \                     ??intlen_1:
   \   00000010   010051E3           CMP      R1,#+1
   \   00000014   040000BA           BLT      ??intlen_2
     50                  start = start/10;
   \   00000018   0100B0E1           MOVS     R0,R1
   \   0000001C   0A10A0E3           MOV      R1,#+10
   \   00000020   ........           _BLF     ??div32_a,??rA??div32_a
     51                  end++;
   \   00000024   012092E2           ADDS     R2,R2,#+1
   \   00000028   F8FFFFEA           B        ??intlen_1
     52              }
     53              return end;
   \                     ??intlen_2:
   \   0000002C   0200B0E1           MOVS     R0,R2
   \   00000030   0080BDE8           POP      {PC}             ;; return
     54          }  
     55          

   \                                 In segment CODE, align 4, keep-with-next
     56          DATETIME getDateTime() { //"2011/3/20"
   \                     ??getDateTime:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0040B0E1           MOVS     R4,R0
     57            DATETIME dt;
     58            REQUEST_DATEANDTIME_GET(SYNC,&dt);
   \   0000000C   0D10B0E1           MOVS     R1,SP
   \   00000010   28009FE5           LDR      R0,??getDateTime_1  ;; SYNC
   \   00000014   000090E5           LDR      R0,[R0, #+0]
   \   00000018   6E0100EF           SWI      +366
     59            return dt;
   \   0000001C   0D00B0E1           MOVS     R0,SP
   \   00000020   0820A0E3           MOV      R2,#+8
   \                     ??getDateTime_2:
   \   00000024   022052E2           SUBS     R2,R2,#+2
   \   00000028   B21090E1           LDRH     R1,[R0, R2]
   \   0000002C   B21084E1           STRH     R1,[R4, R2]
   \   00000030   FBFFFF1A           BNE      ??getDateTime_2
   \   00000034   0400B0E1           MOVS     R0,R4
   \   00000038   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   0000003C   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??getDateTime_1:
   \   00000040   ........           DC32     SYNC
     60          }
     61          

   \                                 In segment CODE, align 4, keep-with-next
     62          wchar_t* int2wstr(int num) {
   \                     ??int2wstr:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
     63            wchar_t* number = new wchar_t[intlen(num) + 0x1];
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           BL       ??intlen
   \   00000010   010090E2           ADDS     R0,R0,#+1
   \   00000014   0210A0E3           MOV      R1,#+2
   \   00000018   910010E0           MULS     R0,R1,R0
   \   0000001C   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
   \   00000020   0050B0E1           MOVS     R5,R0
     64            snwprintf(number,intlen(num),L"%d",num);
   \   00000024   0400B0E1           MOVS     R0,R4
   \   00000028   ........           BL       ??intlen
   \   0000002C   0010B0E1           MOVS     R1,R0
   \   00000030   0430B0E1           MOVS     R3,R4
   \   00000034   24209FE5           LDR      R2,??int2wstr_1  ;; `?<Constant L"\\x25\\x64">`
   \   00000038   0500B0E1           MOVS     R0,R5
   \   0000003C   150100EF           SWI      +277
     65            number[intlen(num)] = 0;
   \   00000040   0400B0E1           MOVS     R0,R4
   \   00000044   ........           BL       ??intlen
   \   00000048   0210A0E3           MOV      R1,#+2
   \   0000004C   915020E0           MLA      R0,R1,R0,R5
   \   00000050   0010A0E3           MOV      R1,#+0
   \   00000054   B010C0E1           STRH     R1,[R0, #+0]
     66            return number;
   \   00000058   0500B0E1           MOVS     R0,R5
   \   0000005C   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??int2wstr_1:
   \   00000060   ........           DC32     `?<Constant L"\\x25\\x64">`
     67          }
     68          

   \                                 In segment CODE, align 4, keep-with-next
     69          bool isDateEqual(DATETIME* r1, DATETIME* r2) {
     70            int dif = r1->date.year - r2->date.year;
   \                     ??isDateEqual:
   \   00000000   B030D0E1           LDRH     R3,[R0, #+0]
   \   00000004   B0C0D1E1           LDRH     R12,[R1, #+0]
   \   00000008   0C3053E0           SUBS     R3,R3,R12
   \   0000000C   0320B0E1           MOVS     R2,R3
     71            if (dif == 0) {
   \   00000010   000052E3           CMP      R2,#+0
   \   00000014   0900001A           BNE      ??isDateEqual_1
     72              dif = r1->date.mon - r2->date.mon;
   \   00000018   0230D0E5           LDRB     R3,[R0, #+2]
   \   0000001C   02C0D1E5           LDRB     R12,[R1, #+2]
   \   00000020   0C3053E0           SUBS     R3,R3,R12
   \   00000024   0320B0E1           MOVS     R2,R3
     73              if (dif == 0) dif = r1->date.day - r2->date.day;
   \   00000028   000052E3           CMP      R2,#+0
   \   0000002C   0300001A           BNE      ??isDateEqual_1
   \   00000030   0330D0E5           LDRB     R3,[R0, #+3]
   \   00000034   03C0D1E5           LDRB     R12,[R1, #+3]
   \   00000038   0C3053E0           SUBS     R3,R3,R12
   \   0000003C   0320B0E1           MOVS     R2,R3
     74            }
     75            return dif;
   \                     ??isDateEqual_1:
   \   00000040   000052E3           CMP      R2,#+0
   \   00000044   0100000A           BEQ      ??isDateEqual_2
   \   00000048   0100A0E3           MOV      R0,#+1
   \   0000004C   000000EA           B        ??isDateEqual_3
   \                     ??isDateEqual_2:
   \   00000050   0000A0E3           MOV      R0,#+0
   \                     ??isDateEqual_3:
   \   00000054   1EFF2FE1           BX       LR               ;; return
     76          }
     77          

   \                                 In segment CODE, align 4, keep-with-next
     78          float celsiusToFahrenheit(int celsius) {
   \                     ??celsiusToFahrenheit:
   \   00000000   00402DE9           PUSH     {LR}
     79            return (celsius * 9 / 5) + 32;
   \   00000004   800190E0           ADDS     R0,R0,R0, LSL #+3
   \   00000008   0510A0E3           MOV      R1,#+5
   \   0000000C   ........           _BLF     ??div32_a,??rA??div32_a
   \   00000010   200091E2           ADDS     R0,R1,#+32
   \   00000014   ........           _BLF     __longToFloat,??__longToFloat??rA
   \   00000018   0080BDE8           POP      {PC}             ;; return
     80          }
     81          

   \                                 In segment CODE, align 4, keep-with-next
     82          float km2Mile(int km) {
   \                     ??km2Mile:
   \   00000000   00402DE9           PUSH     {LR}
     83            return (km * 0.6214);
   \   00000004   ........           _BLF     __longToDouble,??__longToDouble??rA
   \   00000008   0C209FE5           LDR      R2,??km2Mile_1   ;; 0x40b78034
   \   0000000C   0C309FE5           LDR      R3,??km2Mile_1+0x4  ;; 0x3fe3e282
   \   00000010   ........           _BLF     __dMul,??__dMul??rA
   \   00000014   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000018   0080BDE8           POP      {PC}             ;; return
   \                     ??km2Mile_1:
   \   0000001C   3480B740           DC32     0x40b78034
   \   00000020   82E2E33F           DC32     0x3fe3e282
     84          }
     85          

   \                                 In segment CODE, align 4, keep-with-next
     86          float km2meter(int km) {
   \                     ??km2meter:
   \   00000000   00402DE9           PUSH     {LR}
     87            return (km / 3.6);
   \   00000004   ........           _BLF     __longToDouble,??__longToDouble??rA
   \   00000008   0C209FE5           LDR      R2,??km2meter_1  ;; 0xffffffffcccccccd
   \   0000000C   0C309FE5           LDR      R3,??km2meter_1+0x4  ;; 0x400ccccc
   \   00000010   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000014   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000018   0080BDE8           POP      {PC}             ;; return
   \                     ??km2meter_1:
   \   0000001C   CDCCCCCC           DC32     0xffffffffcccccccd
   \   00000020   CCCC0C40           DC32     0x400ccccc
     88          }
     89          

   \                                 In segment CODE, align 4, keep-with-next
     90          void showBox(wchar_t* message, int time) {
   \                     ??showBox:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
     91            MessageBox(0x6FFFFFFF,TextID_Create(message,ENC_UCS2 , wstrlen(message)), NOIMAGE, 1, time,0);
   \   0000000C   0400B0E1           MOVS     R0,R4
   \   00000010   570100EF           SWI      +343
   \   00000014   0020B0E1           MOVS     R2,R0
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   0400B0E1           MOVS     R0,R4
   \   00000020   5D0100EF           SWI      +349
   \   00000024   0010B0E1           MOVS     R1,R0
   \   00000028   0000A0E3           MOV      R0,#+0
   \   0000002C   01002DE9           PUSH     {R0}
   \   00000030   0500B0E1           MOVS     R0,R5
   \   00000034   01002DE9           PUSH     {R0}
   \   00000038   0130A0E3           MOV      R3,#+1
   \   0000003C   FF20A0E3           MOV      R2,#+255
   \   00000040   FF2C82E3           ORR      R2,R2,#0xFF00
   \   00000044   9004E0E3           MVN      R0,#-1879048192
   \   00000048   570200EF           SWI      +599
   \   0000004C   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
     92            message = NULL;
   \   00000050   0000A0E3           MOV      R0,#+0
   \   00000054   0040B0E1           MOVS     R4,R0
     93            delay(time);
   \   00000058   0500B0E1           MOVS     R0,R5
   \   0000005C   850100EF           SWI      +389
     94          }
   \   00000060   3080BDE8           POP      {R4,R5,PC}       ;; return

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant L"\\x25\\x64">`:
   \   00000000   250064000000       DC8 25H, 0, 64H, 0, 0, 0
   \   00000006   0000               DC8 0, 0

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     celsiusToFahrenheit(int)           4
     compareWchar(wchar_t *, wchar_t *)
                                       16
     getDateTime()                     16
     getWSubStr(wchar_t *, int, int)
                                       24
     int2wstr(int)                     12
     intlen(int)                        4
     isDateEqual(DATETIME *, DATETIME *)
                                        0
     km2Mile(int)                       4
     km2meter(int)                      4
     searchLine(wchar_t *)             12
     showBox(wchar_t *, int)           20
     wGetIndexOf(wchar_t *, char, int, int)
                                       28
     wGetIndexOfLine(wchar_t *)        12


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     getWSubStr(wchar_t *, int, int)
                                     160
     wGetIndexOfLine(wchar_t *)       96
     searchLine(wchar_t *)            96
     wGetIndexOf(wchar_t *, char, int, int)
                                     124
     compareWchar(wchar_t *, wchar_t *)
                                     108
     intlen(int)                      52
     getDateTime()                    68
     int2wstr(int)                   100
     isDateEqual(DATETIME *, DATETIME *)
                                      88
     celsiusToFahrenheit(int)         28
     km2Mile(int)                     36
     km2meter(int)                    36
     showBox(wchar_t *, int)         100
     ?<Constant L"\x25\x64">           8
      Others                         136

 
 1 228 bytes in segment CODE
     8 bytes in segment DATA_C
 
 1 092 bytes of CODE  memory (+ 136 bytes shared)
     8 bytes of CONST memory

Errors: none
Warnings: none
